





#include "core:basic.sif"
#include "core:math.sif"

proc main() {
    print("---- VARIABLES ----\n");
    variable1: int = 123;
    variable2:     = 456;
    variable3 := 789;
    printa(variable1, variable2, variable3);

    my_string := "Hello, World!"
    printa(my_string);

    print("\n\n\n");



    print("---- STRUCTS ----\n");
    struct Person {
        name: string;
        age: int;
    }

    bob: Person;
    bob.name = "Bob";
    bob.age = 41;
    printa(bob);

    alice := Person.{"Alice", 32};
    printa(alice);

    alice = .{"Alice", 40};
    printa(alice);

    print("\n\n\n");



    print("---- TYPE INFO ----\n");
    struct My_Struct {
        a: int;
        b: bool;
        c: string;
        d: ^My_Struct;
    }

    type_info : ^Type_Info = get_type_info(My_Struct);
    assert(type_info.kind == Type_Info_Struct);
    struct_info := cast(^Type_Info_Struct, type_info);
    for (i := 0; i < struct_info.fields.count; i += 1) {
        field := struct_info.fields[i];
        printa(field);
        printa(field.type^);
        print("\n");
    }

    print("\n\n");



    print("---- using ----\n");
    struct Game_Object {
        using position: Vector3;
        name: string;
    }

    go: Game_Object;
    go.position = .{1, 4, 9};
    go.name = "New Game Object";
    printa(go);

    go.x = 12;
    go.y = 34;
    go.z = 56;
    printa(go);

    struct Sword {
        using base: Game_Object;
        damage: int;
    }

    sword: Sword;
    sword.name = "Excalibur";
    sword.position = .{45, 0, 124.2};
    sword.damage = 9999;
    printa(sword);

    using sword;
    printa(name, damage);

    print("\n\n\n");



    print("---- PROCEDURAL TYPE POLYMORPHISM ----\n");
    proc add_things(a: $T, b: T) : T {
        return a + b;
    }

    int1: int = 12;
    int2 := 23;
    printa(add_things(int1, int2));

    float1: float = 34;
    float2 := 45.0;
    printa(add_things(float1, float2));

    vector1: Vector3 = .{1, 2, 3};
    vector2 := Vector3.{4, 5, 6};
    printa(add_things(vector1, vector2));

    // string1: string = "Hello, ";
    // string2: string = "World!";
    // printa(add_things(string1, string2));

    print("\n\n\n");



    print("---- PROCEDURAL VALUE POLYMORPHISM ----\n");
    proc add_constants($a: $T, $b: T) : T {
        return a + b;
    }

    printa(add_constants(1, 2));
    printa(add_constants(3, 4));
    printa(add_constants("Hello, ", "World!"));

    print("\n");

    proc print_fields_of_type($T: typeid) {
        print("in print_fields_of_type with T == %\n", T);
        type_info := get_type_info(T);
        assert(type_info.kind == Type_Info_Struct);
        struct_info := cast(^Type_Info_Struct, type_info);
        for (i := 0; i < struct_info.fields.count; i += 1) {
            field := struct_info.fields[i];
            printa(field);
        }
        print("\n");
    }

    print_fields_of_type(Vector3);
    print_fields_of_type(Game_Object);
    print_fields_of_type(Sword);

    print("\n\n");



    print("---- STRUCTURAL POLYMORPHISM ----\n");
    struct Container!($N: int, $T: typeid) {
        data: [N]T;
    }

    int_container: Container!(1, int);
    int_container.data[0] = 123;
    printa(int_container);

    float_container: Container!(2, float);
    float_container.data = .{34, 321};
    printa(float_container);

    string_container: Container!(4, string);
    string_container.data[0] = "foo";
    string_container.data[2] = "bar";
    printa(string_container);
}
