#include "core:windows.sif"
#include "core:dxgi.sif"
#include "core:dxgitype.sif"
#include "core:dxgicommon.sif"
#include "core:dx.sif"
#include "core:d3dcommon.sif"

const D3D11_16BIT_INDEX_STRIP_CUT_VALUE                                        =  0xffff;
const D3D11_32BIT_INDEX_STRIP_CUT_VALUE                                        =  0xffffffff;
const D3D11_8BIT_INDEX_STRIP_CUT_VALUE                                         =  0xff;
const D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT                                 =  9;
const D3D11_CLIP_OR_CULL_DISTANCE_COUNT                                        =  8;
const D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT                                =  2;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT                        =  14;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS                            =  4;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT                   =  32;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT                         =  15;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT =  16;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS                   =  4;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT                        =  15;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST               =  1;
const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS                   =  1;
const D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT                             =  64;
const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS         =  4;
const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT              =  1;
const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST     =  1;
const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS         =  1;
const D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT                   =  32;
const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS                    =  1;
const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT                         =  128;
const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST                =  1;
const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS                    =  1;
const D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT                             =  128;
const D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS                           =  1;
const D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT                                =  16;
const D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST                       =  1;
const D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS                           =  1;
const D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT                                    =  16;
const D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT                              =  32;
const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS                              =  4;
const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT                     =  32;
const D3D11_COMMONSHADER_TEMP_REGISTER_COUNT                                   =  4096;
const D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST                          =  3;
const D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS                              =  3;
const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX                          =  10;
const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN                          =  -10;
const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE                             =  -8;
const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE                             =  7;
const D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  256;
const D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP                          =  64;
const D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  240;
const D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP                          =  68;
const D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  224;
const D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP                          =  72;
const D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  208;
const D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP                          =  76;
const D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  192;
const D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP                          =  84;
const D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  176;
const D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP                          =  92;
const D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  160;
const D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP                          =  100;
const D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  144;
const D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP                          =  112;
const D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  128;
const D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP                          =  128;
const D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  112;
const D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP                          =  144;
const D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  96;
const D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP                          =  168;
const D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  80;
const D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP                          =  204;
const D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  64;
const D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP                          =  256;
const D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  48;
const D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP                          =  340;
const D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  32;
const D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP                          =  512;
const D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD                 =  16;
const D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP                          =  768;
const D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION                   =  1;
const D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT                                      =  256;
const D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP                          =  768;
const D3D11_CS_4_X_THREAD_GROUP_MAX_X                                          =  768;
const D3D11_CS_4_X_THREAD_GROUP_MAX_Y                                          =  768;
const D3D11_CS_4_X_UAV_REGISTER_COUNT                                          =  1;
const D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION                        =  65535;
const D3D11_CS_TGSM_REGISTER_COUNT                                             =  8192;
const D3D11_CS_TGSM_REGISTER_READS_PER_INST                                    =  1;
const D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS                               =  1;
const D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS                               =  1;
const D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS                               =  3;
const D3D11_CS_THREADGROUPID_REGISTER_COUNT                                    =  1;
const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS                    =  1;
const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT                         =  1;
const D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS                             =  3;
const D3D11_CS_THREADIDINGROUP_REGISTER_COUNT                                  =  1;
const D3D11_CS_THREADID_REGISTER_COMPONENTS                                    =  3;
const D3D11_CS_THREADID_REGISTER_COUNT                                         =  1;
const D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP                              =  1024;
const D3D11_CS_THREAD_GROUP_MAX_X                                              =  1024;
const D3D11_CS_THREAD_GROUP_MAX_Y                                              =  1024;
const D3D11_CS_THREAD_GROUP_MAX_Z                                              =  64;
const D3D11_CS_THREAD_GROUP_MIN_X                                              =  1;
const D3D11_CS_THREAD_GROUP_MIN_Y                                              =  1;
const D3D11_CS_THREAD_GROUP_MIN_Z                                              =  1;
const D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL                                 =  16384;
const D3D11_DEFAULT_BLEND_FACTOR_ALPHA                                         =  1.0;
const D3D11_DEFAULT_BLEND_FACTOR_BLUE                                          =  1.0;
const D3D11_DEFAULT_BLEND_FACTOR_GREEN                                         =  1.0;
const D3D11_DEFAULT_BLEND_FACTOR_RED                                           =  1.0;
const D3D11_DEFAULT_BORDER_COLOR_COMPONENT                                     =  0.0;
const D3D11_DEFAULT_DEPTH_BIAS                                                 =  0;
const D3D11_DEFAULT_DEPTH_BIAS_CLAMP                                           =  0.0;
const D3D11_DEFAULT_MAX_ANISOTROPY                                             =  16;
const D3D11_DEFAULT_MIP_LOD_BIAS                                               =  0.0;
const D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX                                  =  0;
const D3D11_DEFAULT_SAMPLE_MASK                                                =  0xffffffff;
const D3D11_DEFAULT_SCISSOR_ENDX                                               =  0;
const D3D11_DEFAULT_SCISSOR_ENDY                                               =  0;
const D3D11_DEFAULT_SCISSOR_STARTX                                             =  0;
const D3D11_DEFAULT_SCISSOR_STARTY                                             =  0;
const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS                                    =  0.0;
const D3D11_DEFAULT_STENCIL_READ_MASK                                          =  0xff;
const D3D11_DEFAULT_STENCIL_REFERENCE                                          =  0;
const D3D11_DEFAULT_STENCIL_WRITE_MASK                                         =  0xff;
const D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX                             =  0;
const D3D11_DEFAULT_VIEWPORT_HEIGHT                                            =  0;
const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH                                         =  0.0;
const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH                                         =  0.0;
const D3D11_DEFAULT_VIEWPORT_TOPLEFTX                                          =  0;
const D3D11_DEFAULT_VIEWPORT_TOPLEFTY                                          =  0;
const D3D11_DEFAULT_VIEWPORT_WIDTH                                             =  0;
const D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS                          =  3968;
const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS                         =  4;
const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT                =  32;
const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT                              =  32;
const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST                     =  2;
const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS                         =  1;
const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS                          =  3;
const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT                 =  32;
const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT                               =  1;
const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST                      =  2;
const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS                          =  1;
const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS                        =  4;
const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT               =  32;
const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT                             =  32;
const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST                    =  2;
const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS                        =  1;
const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS                          =  1;
const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT                 =  32;
const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT                               =  1;
const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST                      =  2;
const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS                          =  1;
const D3D11_DS_OUTPUT_REGISTER_COMPONENTS                                      =  4;
const D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT                             =  32;
const D3D11_DS_OUTPUT_REGISTER_COUNT                                           =  32;
const D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP                                     =  0.6;
const D3D11_FLOAT32_MAX                                                        =  3.402823466e+38;
const D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP                                =  0.6;
const D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR                                 =  2.4;
const D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR                                   =  1.0;
const D3D11_FLOAT_TO_SRGB_OFFSET                                               =  0.055;
const D3D11_FLOAT_TO_SRGB_SCALE_1                                              =  12.92;
const D3D11_FLOAT_TO_SRGB_SCALE_2                                              =  1.055;
const D3D11_FLOAT_TO_SRGB_THRESHOLD                                            =  0.0031308;
const D3D11_FTOI_INSTRUCTION_MAX_INPUT                                         =  2147483647.999;
const D3D11_FTOI_INSTRUCTION_MIN_INPUT                                         =  -2147483648.999;
const D3D11_FTOU_INSTRUCTION_MAX_INPUT                                         =  4294967295.999;
const D3D11_FTOU_INSTRUCTION_MIN_INPUT                                         =  0.0;
const D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST                                =  2;
const D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS                                    =  1;
const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS                           =  1;
const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT                  =  32;
const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT                                =  1;
const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS                            =  1;
const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT                   =  32;
const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT                                 =  1;
const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST                        =  2;
const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS                            =  1;
const D3D11_GS_INPUT_REGISTER_COMPONENTS                                       =  4;
const D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT                              =  32;
const D3D11_GS_INPUT_REGISTER_COUNT                                            =  32;
const D3D11_GS_INPUT_REGISTER_READS_PER_INST                                   =  2;
const D3D11_GS_INPUT_REGISTER_READ_PORTS                                       =  1;
const D3D11_GS_INPUT_REGISTER_VERTICES                                         =  32;
const D3D11_GS_MAX_INSTANCE_COUNT                                              =  32;
const D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES                        =  1024;
const D3D11_GS_OUTPUT_ELEMENTS                                                 =  32;
const D3D11_GS_OUTPUT_REGISTER_COMPONENTS                                      =  4;
const D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT                             =  32;
const D3D11_GS_OUTPUT_REGISTER_COUNT                                           =  32;
const D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT                        =  32;
const D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT                       =  32;
const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS                               =  4;
const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT                      =  32;
const D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST                           =  2;
const D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS                               =  1;
const D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND                           =  0xffffffff;
const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS                      =  1;
const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT             =  32;
const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT                           =  1;
const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST                  =  2;
const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS                      =  1;
const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS                      =  1;
const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT             =  32;
const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT                           =  1;
const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST                  =  2;
const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS                      =  1;
const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS                          =  1;
const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT                 =  32;
const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT                               =  1;
const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST                      =  2;
const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS                          =  1;
const D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND                           =  0xffffffff;
const D3D11_HS_MAXTESSFACTOR_LOWER_BOUND                                       =  1.0;
const D3D11_HS_MAXTESSFACTOR_UPPER_BOUND                                       =  64.0;
const D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS                         =  3968;
const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS                     =  1;
const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT            =  32;
const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT                          =  1;
const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST                 =  2;
const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS                     =  1;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS                       =  4;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT              =  32;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT                            =  32;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST                   =  2;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS                       =  1;
const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS                =  128;
const D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES                            =  0;
const D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY                                      =  0;
const D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES                           =  0;
const D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT                                 =  1;
const D3D11_IA_INSTANCE_ID_BIT_COUNT                                           =  32;
const D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT                                    =  32;
const D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT                                   =  32;
const D3D11_IA_PRIMITIVE_ID_BIT_COUNT                                          =  32;
const D3D11_IA_VERTEX_ID_BIT_COUNT                                             =  32;
const D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT                                =  32;
const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS                      =  128;
const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT                            =  32;
const D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT                                    =  0xffffffff;
const D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER                                   =  0xffffffff;
const D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL                              =  0xffffffff;
const D3D11_KEEP_UNORDERED_ACCESS_VIEWS                                        =  0xffffffff;
const D3D11_LINEAR_GAMMA                                                       =  1.0;
const D3D11_MAJOR_VERSION                                                      =  11;
const D3D11_MAX_BORDER_COLOR_COMPONENT                                         =  1.0;
const D3D11_MAX_DEPTH                                                          =  1.0;
const D3D11_MAX_MAXANISOTROPY                                                  =  16;
const D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT                                       =  32;
const D3D11_MAX_POSITION_VALUE                                                 =  3.402823466e+34;
const D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP                                     =  17;
const D3D11_MINOR_VERSION                                                      =  0;
const D3D11_MIN_BORDER_COLOR_COMPONENT                                         =  0.0;
const D3D11_MIN_DEPTH                                                          =  0.0;
const D3D11_MIN_MAXANISOTROPY                                                  =  0;
const D3D11_MIP_LOD_BIAS_MAX                                                   =  15.99;
const D3D11_MIP_LOD_BIAS_MIN                                                   =  -16.0;
const D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT                                       =  8;
const D3D11_MIP_LOD_RANGE_BIT_COUNT                                            =  8;
const D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH                                   =  1.4;
const D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT                         =  0;
const D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT                                      =  15;
const D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT                          =  16;
const D3D11_PS_CS_UAV_REGISTER_COMPONENTS                                      =  1;
const D3D11_PS_CS_UAV_REGISTER_COUNT                                           =  8;
const D3D11_PS_CS_UAV_REGISTER_READS_PER_INST                                  =  1;
const D3D11_PS_CS_UAV_REGISTER_READ_PORTS                                      =  1;
const D3D11_PS_FRONTFACING_DEFAULT_VALUE                                       =  0xffffffff;
const D3D11_PS_FRONTFACING_FALSE_VALUE                                         =  0;
const D3D11_PS_FRONTFACING_TRUE_VALUE                                          =  0xffffffff;
const D3D11_PS_INPUT_REGISTER_COMPONENTS                                       =  4;
const D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT                              =  32;
const D3D11_PS_INPUT_REGISTER_COUNT                                            =  32;
const D3D11_PS_INPUT_REGISTER_READS_PER_INST                                   =  2;
const D3D11_PS_INPUT_REGISTER_READ_PORTS                                       =  1;
const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT                        =  0.0;
const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS                                =  1;
const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT                       =  32;
const D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT                                     =  1;
const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS                                 =  1;
const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT                        =  32;
const D3D11_PS_OUTPUT_MASK_REGISTER_COUNT                                      =  1;
const D3D11_PS_OUTPUT_REGISTER_COMPONENTS                                      =  4;
const D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT                             =  32;
const D3D11_PS_OUTPUT_REGISTER_COUNT                                           =  8;
const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT                               =  0.5;
const D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT                                         =  16;
const D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE                                  =  4096;
const D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP                           =  27;
const D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT                                  =  4096;
const D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE                          =  4096;
const D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP                               =  32;
const D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP                                     =  32;
const D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION                    =  16384;
const D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT                     =  1024;
const D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT                        =  4096;
const D3D11_REQ_MAXANISOTROPY                                                  =  16;
const D3D11_REQ_MIP_LEVELS                                                     =  15;
const D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES                          =  2048;
const D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE                             =  4096;
const D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH                                  =  16384;
const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM                   =  128;
const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM                   =  0.25;
const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM                   =  2048;
const D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP                        =  20;
const D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE                                =  4096;
const D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION                                 =  2048;
const D3D11_REQ_TEXTURE1D_U_DIMENSION                                          =  16384;
const D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION                                 =  2048;
const D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION                                     =  16384;
const D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION                                   =  2048;
const D3D11_REQ_TEXTURECUBE_DIMENSION                                          =  16384;
const D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL                       =  0;
const D3D11_SHADER_MAJOR_VERSION                                               =  5;
const D3D11_SHADER_MAX_INSTANCES                                               =  65535;
const D3D11_SHADER_MAX_INTERFACES                                              =  253;
const D3D11_SHADER_MAX_INTERFACE_CALL_SITES                                    =  4096;
const D3D11_SHADER_MAX_TYPES                                                   =  65535;
const D3D11_SHADER_MINOR_VERSION                                               =  0;
const D3D11_SHIFT_INSTRUCTION_PAD_VALUE                                        =  0;
const D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT                            =  5;
const D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT                                   =  8;
const D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES                                      =  2048;
const D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES                                =  512;
const D3D11_SO_BUFFER_SLOT_COUNT                                               =  4;
const D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP                                 =  0xffffffff;
const D3D11_SO_NO_RASTERIZED_STREAM                                            =  0xffffffff;
const D3D11_SO_OUTPUT_COMPONENT_COUNT                                          =  128;
const D3D11_SO_STREAM_COUNT                                                    =  4;
const D3D11_SPEC_DATE_DAY                                                      =  16;
const D3D11_SPEC_DATE_MONTH                                                    =  5;
const D3D11_SPEC_DATE_YEAR                                                     =  2011;
const D3D11_SPEC_VERSION                                                       =  1.07;
const D3D11_SRGB_GAMMA                                                         =  2.2;
const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1                                        =  12.92;
const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2                                        =  1.055;
const D3D11_SRGB_TO_FLOAT_EXPONENT                                             =  2.4;
const D3D11_SRGB_TO_FLOAT_OFFSET                                               =  0.055;
const D3D11_SRGB_TO_FLOAT_THRESHOLD                                            =  0.04045;
const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP                                     =  0.5;
const D3D11_STANDARD_COMPONENT_BIT_COUNT                                       =  32;
const D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED                               =  64;
const D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE                   =  4;
const D3D11_STANDARD_PIXEL_COMPONENT_COUNT                                     =  128;
const D3D11_STANDARD_PIXEL_ELEMENT_COUNT                                       =  32;
const D3D11_STANDARD_VECTOR_SIZE                                               =  4;
const D3D11_STANDARD_VERTEX_ELEMENT_COUNT                                      =  32;
const D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT                              =  64;
const D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT                                      =  8;
const D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT                                      =  8;
const D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR                           =  64;
const D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR                =  64;
const D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR                            =  63;
const D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR                                =  64;
const D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR                           =  2;
const D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR                =  1;
const D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR                            =  1;
const D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT                                      =  16;
const D3D11_UNBOUND_MEMORY_ACCESS_RESULT                                       =  0;
const D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX                                 =  15;
const D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE                 =  16;
const D3D11_VIEWPORT_BOUNDS_MAX                                                =  32767;
const D3D11_VIEWPORT_BOUNDS_MIN                                                =  -32768;
const D3D11_VS_INPUT_REGISTER_COMPONENTS                                       =  4;
const D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT                              =  32;
const D3D11_VS_INPUT_REGISTER_COUNT                                            =  32;
const D3D11_VS_INPUT_REGISTER_READS_PER_INST                                   =  2;
const D3D11_VS_INPUT_REGISTER_READ_PORTS                                       =  1;
const D3D11_VS_OUTPUT_REGISTER_COMPONENTS                                      =  4;
const D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT                             =  32;
const D3D11_VS_OUTPUT_REGISTER_COUNT                                           =  32;
const D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT                              =  10;
const D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP                              =  25;
const D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP                                    =  25;


struct D3D11_INPUT_ELEMENT_DESC {
    var SemanticName: LPCSTR;
    var SemanticIndex: UINT;
    var Format: DXGI_FORMAT;
    var InputSlot: UINT;
    var AlignedByteOffset: UINT;
    var InputSlotClass: UINT;
    var InstanceDataStepRate: UINT;
}
struct D3D11_SO_DECLARATION_ENTRY {
    var Stream: UINT;
    var SemanticName: LPCSTR;
    var SemanticIndex: UINT;
    var StartComponent: BYTE;
    var ComponentCount: BYTE;
    var OutputSlot: BYTE;
}
struct D3D11_VIEWPORT {
    var TopLeftX: FLOAT;
    var TopLeftY: FLOAT;
    var Width: FLOAT;
    var Height: FLOAT;
    var MinDepth: FLOAT;
    var MaxDepth: FLOAT;
}
struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS {
    var VertexCountPerInstance: UINT;
    var InstanceCount: UINT;
    var StartVertexLocation: UINT;
    var StartInstanceLocation: UINT;
}
struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS {
    var IndexCountPerInstance: UINT;
    var InstanceCount: UINT;
    var StartIndexLocation: UINT;
    var BaseVertexLocation: INT;
    var StartInstanceLocation: UINT;
}
struct D3D11_BOX {
    var left: UINT;
    var top: UINT;
    var front: UINT;
    var right: UINT;
    var bottom: UINT;
    var back: UINT;
}
struct ID3D11DeviceChild {
    using var vtbl: ^ID3D11DeviceChildVtbl;
}
struct ID3D11DeviceChildVtbl {
    var QueryInterface : proc(This: ^ID3D11DeviceChild, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11DeviceChild) : ULONG;
    var Release : proc(This: ^ID3D11DeviceChild) : ULONG;
    var GetDevice : proc(This: ^ID3D11DeviceChild, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11DeviceChild, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11DeviceChild, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11DeviceChild, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct D3D11_DEPTH_STENCILOP_DESC {
    var StencilFailOp: UINT;
    var StencilDepthFailOp: UINT;
    var StencilPassOp: UINT;
    var StencilFunc: UINT;
}
struct D3D11_DEPTH_STENCIL_DESC {
    var DepthEnable: BOOL;
    var DepthWriteMask: UINT;
    var DepthFunc: UINT;
    var StencilEnable: BOOL;
    var StencilReadMask: UINT8;
    var StencilWriteMask: UINT8;
    var FrontFace: D3D11_DEPTH_STENCILOP_DESC;
    var BackFace: D3D11_DEPTH_STENCILOP_DESC;
}
struct ID3D11DepthStencilState {
    using var vtbl: ^ID3D11DepthStencilStateVtbl;
}
struct ID3D11DepthStencilStateVtbl {
    var QueryInterface : proc(This: ^ID3D11DepthStencilState, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11DepthStencilState) : ULONG;
    var Release : proc(This: ^ID3D11DepthStencilState) : ULONG;
    var GetDevice : proc(This: ^ID3D11DepthStencilState, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11DepthStencilState, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11DepthStencilState, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11DepthStencilState, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDesc : proc(This: ^ID3D11DepthStencilState, pDesc: ^D3D11_DEPTH_STENCIL_DESC);
}
struct D3D11_RENDER_TARGET_BLEND_DESC {
    var BlendEnable: BOOL;
    var SrcBlend: UINT;
    var DestBlend: UINT;
    var BlendOp: UINT;
    var SrcBlendAlpha: UINT;
    var DestBlendAlpha: UINT;
    var BlendOpAlpha: UINT;
    var RenderTargetWriteMask: UINT8;
}
struct D3D11_BLEND_DESC {
    var AlphaToCoverageEnable: BOOL;
    var IndependentBlendEnable: BOOL;
    var RenderTarget: [8]D3D11_RENDER_TARGET_BLEND_DESC;
}
struct ID3D11BlendState {
    using var vtbl: ^ID3D11BlendStateVtbl;
}
struct ID3D11BlendStateVtbl {
    var QueryInterface : proc(This: ^ID3D11BlendState, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11BlendState) : ULONG;
    var Release : proc(This: ^ID3D11BlendState) : ULONG;
    var GetDevice : proc(This: ^ID3D11BlendState, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11BlendState, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11BlendState, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11BlendState, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDesc : proc(This: ^ID3D11BlendState, pDesc: ^D3D11_BLEND_DESC);
}
struct D3D11_RASTERIZER_DESC {
    var FillMode: UINT;
    var CullMode: UINT;
    var FrontCounterClockwise: BOOL;
    var DepthBias: INT;
    var DepthBiasClamp: FLOAT;
    var SlopeScaledDepthBias: FLOAT;
    var DepthClipEnable: BOOL;
    var ScissorEnable: BOOL;
    var MultisampleEnable: BOOL;
    var AntialiasedLineEnable: BOOL;
}
struct ID3D11RasterizerState {
    using var vtbl: ^ID3D11RasterizerStateVtbl;
}
struct ID3D11RasterizerStateVtbl {
    var QueryInterface : proc(This: ^ID3D11RasterizerState, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11RasterizerState) : ULONG;
    var Release : proc(This: ^ID3D11RasterizerState) : ULONG;
    var GetDevice : proc(This: ^ID3D11RasterizerState, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11RasterizerState, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11RasterizerState, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11RasterizerState, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDesc : proc(This: ^ID3D11RasterizerState, pDesc: ^D3D11_RASTERIZER_DESC);
}
struct D3D11_SUBRESOURCE_DATA {
    var pSysMem: rawptr;
    var SysMemPitch: UINT;
    var SysMemSlicePitch: UINT;
}
struct D3D11_MAPPED_SUBRESOURCE {
    var pData: rawptr;
    var RowPitch: UINT;
    var DepthPitch: UINT;
}
struct ID3D11Resource {
    using var vtbl: ^ID3D11ResourceVtbl;
}
struct ID3D11ResourceVtbl {
    var QueryInterface : proc(This: ^ID3D11Resource, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Resource) : ULONG;
    var Release : proc(This: ^ID3D11Resource) : ULONG;
    var GetDevice : proc(This: ^ID3D11Resource, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Resource, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Resource, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Resource, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetType : proc(This: ^ID3D11Resource, pResourceDimension: ^UINT);
    var SetEvictionPriority : proc(This: ^ID3D11Resource, EvictionPriority: UINT);
    var GetEvictionPriority : proc(This: ^ID3D11Resource) : UINT;
}
struct D3D11_BUFFER_DESC {
    var ByteWidth: UINT;
    var Usage: UINT;
    var BindFlags: UINT;
    var CPUAccessFlags: UINT;
    var MiscFlags: UINT;
    var StructureByteStride: UINT;
}
struct ID3D11Buffer {
    using var vtbl: ^ID3D11BufferVtbl;
}
struct ID3D11BufferVtbl {
    var QueryInterface : proc(This: ^ID3D11Buffer, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Buffer) : ULONG;
    var Release : proc(This: ^ID3D11Buffer) : ULONG;
    var GetDevice : proc(This: ^ID3D11Buffer, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Buffer, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Buffer, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Buffer, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetType : proc(This: ^ID3D11Buffer, pResourceDimension: ^UINT);
    var SetEvictionPriority : proc(This: ^ID3D11Buffer, EvictionPriority: UINT);
    var GetEvictionPriority : proc(This: ^ID3D11Buffer) : UINT;
    var GetDesc : proc(This: ^ID3D11Buffer, pDesc: ^D3D11_BUFFER_DESC);
}
struct D3D11_TEXTURE1D_DESC {
    var Width: UINT;
    var MipLevels: UINT;
    var ArraySize: UINT;
    var Format: DXGI_FORMAT;
    var Usage: UINT;
    var BindFlags: UINT;
    var CPUAccessFlags: UINT;
    var MiscFlags: UINT;
}
struct ID3D11Texture1D {
    using var vtbl: ^ID3D11Texture1DVtbl;
}
struct ID3D11Texture1DVtbl {
    var QueryInterface : proc(This: ^ID3D11Texture1D, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Texture1D) : ULONG;
    var Release : proc(This: ^ID3D11Texture1D) : ULONG;
    var GetDevice : proc(This: ^ID3D11Texture1D, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Texture1D, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Texture1D, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Texture1D, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetType : proc(This: ^ID3D11Texture1D, pResourceDimension: ^UINT);
    var SetEvictionPriority : proc(This: ^ID3D11Texture1D, EvictionPriority: UINT);
    var GetEvictionPriority : proc(This: ^ID3D11Texture1D) : UINT;
    var GetDesc : proc(This: ^ID3D11Texture1D, pDesc: ^D3D11_TEXTURE1D_DESC);
}
struct D3D11_TEXTURE2D_DESC {
    var Width: UINT;
    var Height: UINT;
    var MipLevels: UINT;
    var ArraySize: UINT;
    var Format: DXGI_FORMAT;
    var SampleDesc: DXGI_SAMPLE_DESC;
    var Usage: UINT;
    var BindFlags: UINT;
    var CPUAccessFlags: UINT;
    var MiscFlags: UINT;
}
struct ID3D11Texture2D {
    using var vtbl: ^ID3D11Texture2DVtbl;
    const uuid = "6f15aaf2-d208-4e89-9ab4-489535d34f9c";

}
struct ID3D11Texture2DVtbl {
    var QueryInterface : proc(This: ^ID3D11Texture2D, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Texture2D) : ULONG;
    var Release : proc(This: ^ID3D11Texture2D) : ULONG;
    var GetDevice : proc(This: ^ID3D11Texture2D, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Texture2D, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Texture2D, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Texture2D, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetType : proc(This: ^ID3D11Texture2D, pResourceDimension: ^UINT);
    var SetEvictionPriority : proc(This: ^ID3D11Texture2D, EvictionPriority: UINT);
    var GetEvictionPriority : proc(This: ^ID3D11Texture2D) : UINT;
    var GetDesc : proc(This: ^ID3D11Texture2D, pDesc: ^D3D11_TEXTURE2D_DESC);
}
struct D3D11_TEXTURE3D_DESC {
    var Width: UINT;
    var Height: UINT;
    var Depth: UINT;
    var MipLevels: UINT;
    var Format: DXGI_FORMAT;
    var Usage: UINT;
    var BindFlags: UINT;
    var CPUAccessFlags: UINT;
    var MiscFlags: UINT;
}
struct ID3D11Texture3D {
   using var vtbl: ^ID3D11Texture3DVtbl;
}
struct ID3D11Texture3DVtbl {
    var QueryInterface : proc(This: ^ID3D11Texture3D, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Texture3D) : ULONG;
    var Release : proc(This: ^ID3D11Texture3D) : ULONG;
    var GetDevice : proc(This: ^ID3D11Texture3D, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Texture3D, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Texture3D, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Texture3D, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetType : proc(This: ^ID3D11Texture3D, pResourceDimension: ^UINT);
    var SetEvictionPriority : proc(This: ^ID3D11Texture3D, EvictionPriority: UINT);
    var GetEvictionPriority : proc(This: ^ID3D11Texture3D) : UINT;
    var GetDesc : proc(This: ^ID3D11Texture3D, pDesc: ^D3D11_TEXTURE3D_DESC);
}
struct ID3D11View {
   using var vtbl: ^ID3D11ViewVtbl;
}
struct ID3D11ViewVtbl {
    var QueryInterface : proc(This: ^ID3D11View, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11View) : ULONG;
    var Release : proc(This: ^ID3D11View) : ULONG;
    var GetDevice : proc(This: ^ID3D11View, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11View, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11View, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11View, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11View, ppResource: ^^ID3D11Resource);
}
struct D3D11_BUFFER_SRV {
    var _0: union {
        var FirstElement: UINT;
        var ElementOffset: UINT;
    };
    var _1: union {
        var NumElements: UINT;
        var ElementWidth: UINT;
    };
}
struct D3D11_BUFFEREX_SRV {
    var FirstElement: UINT;
    var NumElements: UINT;
    var Flags: UINT;
}
struct D3D11_TEX1D_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
}
struct D3D11_TEX1D_ARRAY_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2D_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
}
struct D3D11_TEX2D_ARRAY_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX3D_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
}
struct D3D11_TEXCUBE_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
}
struct D3D11_TEXCUBE_ARRAY_SRV {
    var MostDetailedMip: UINT;
    var MipLevels: UINT;
    var First2DArrayFace: UINT;
    var NumCubes: UINT;
}
struct D3D11_TEX2DMS_SRV {
    var UnusedField_NothingToDefine: UINT;
}
struct D3D11_TEX2DMS_ARRAY_SRV {
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_SHADER_RESOURCE_VIEW_DESC {
    var Format: DXGI_FORMAT;
    var ViewDimension: D3D11_SRV_DIMENSION;
    using var _2: union {
        var Buffer: D3D11_BUFFER_SRV;
        var Texture1D: D3D11_TEX1D_SRV;
        var Texture1DArray: D3D11_TEX1D_ARRAY_SRV;
        var Texture2D: D3D11_TEX2D_SRV;
        var Texture2DArray: D3D11_TEX2D_ARRAY_SRV;
        var Texture2DMS: D3D11_TEX2DMS_SRV;
        var Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV;
        var Texture3D: D3D11_TEX3D_SRV;
        var TextureCube: D3D11_TEXCUBE_SRV;
        var TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV;
        var BufferEx: D3D11_BUFFEREX_SRV;
    };
}
struct ID3D11ShaderResourceView {
    using var vtbl: ^ID3D11ShaderResourceViewVtbl;
}
struct ID3D11ShaderResourceViewVtbl {
    var QueryInterface : proc(This: ^ID3D11ShaderResourceView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11ShaderResourceView) : ULONG;
    var Release : proc(This: ^ID3D11ShaderResourceView) : ULONG;
    var GetDevice : proc(This: ^ID3D11ShaderResourceView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11ShaderResourceView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11ShaderResourceView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11ShaderResourceView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11ShaderResourceView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11ShaderResourceView, pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC);
}
struct D3D11_BUFFER_RTV {
    var _0: union {
        var FirstElement: UINT;
        var ElementOffset: UINT;
    };
    var _1: union {
        var NumElements: UINT;
        var ElementWidth: UINT;
    };
}
struct D3D11_TEX1D_RTV {
    var MipSlice: UINT;
}
struct D3D11_TEX1D_ARRAY_RTV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2D_RTV {
    var MipSlice: UINT;
}
struct D3D11_TEX2DMS_RTV {
    var UnusedField_NothingToDefine: UINT;
}
struct D3D11_TEX2D_ARRAY_RTV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2DMS_ARRAY_RTV {
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX3D_RTV {
    var MipSlice: UINT;
    var FirstWSlice: UINT;
    var WSize: UINT;
}
struct D3D11_RENDER_TARGET_VIEW_DESC {
    var Format: DXGI_FORMAT;
    var ViewDimension: UINT;
    var _2: union {
        var Buffer: D3D11_BUFFER_RTV;
        var Texture1D: D3D11_TEX1D_RTV;
        var Texture1DArray: D3D11_TEX1D_ARRAY_RTV;
        var Texture2D: D3D11_TEX2D_RTV;
        var Texture2DArray: D3D11_TEX2D_ARRAY_RTV;
        var Texture2DMS: D3D11_TEX2DMS_RTV;
        var Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV;
        var Texture3D: D3D11_TEX3D_RTV;
    };
}
struct ID3D11RenderTargetView {
    using var vtbl: ^ID3D11RenderTargetViewVtbl;
}
struct ID3D11RenderTargetViewVtbl {
    var QueryInterface : proc(This: ^ID3D11RenderTargetView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11RenderTargetView) : ULONG;
    var Release : proc(This: ^ID3D11RenderTargetView) : ULONG;
    var GetDevice : proc(This: ^ID3D11RenderTargetView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11RenderTargetView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11RenderTargetView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11RenderTargetView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11RenderTargetView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11RenderTargetView, pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC);
}
struct D3D11_TEX1D_DSV {
    var MipSlice: UINT;
}
struct D3D11_TEX1D_ARRAY_DSV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2D_DSV {
    var MipSlice: UINT;
}
struct D3D11_TEX2D_ARRAY_DSV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2DMS_DSV {
    var UnusedField_NothingToDefine: UINT;
}
struct D3D11_TEX2DMS_ARRAY_DSV {
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_DEPTH_STENCIL_VIEW_DESC {
    var Format: DXGI_FORMAT;
    var ViewDimension: UINT;
    var Flags: UINT;
    var _3: union {
        var Texture1D: D3D11_TEX1D_DSV;
        var Texture1DArray: D3D11_TEX1D_ARRAY_DSV;
        var Texture2D: D3D11_TEX2D_DSV;
        var Texture2DArray: D3D11_TEX2D_ARRAY_DSV;
        var Texture2DMS: D3D11_TEX2DMS_DSV;
        var Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV;
    };
}
struct ID3D11DepthStencilView {
    using var vtbl: ^ID3D11DepthStencilViewVtbl;
}
struct ID3D11DepthStencilViewVtbl {
    var QueryInterface : proc(This: ^ID3D11DepthStencilView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11DepthStencilView) : ULONG;
    var Release : proc(This: ^ID3D11DepthStencilView) : ULONG;
    var GetDevice : proc(This: ^ID3D11DepthStencilView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11DepthStencilView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11DepthStencilView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11DepthStencilView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11DepthStencilView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11DepthStencilView, pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC);
}
struct D3D11_BUFFER_UAV {
    var FirstElement: UINT;
    var NumElements: UINT;
    var Flags: UINT;
}
struct D3D11_TEX1D_UAV {
    var MipSlice: UINT;
}
struct D3D11_TEX1D_ARRAY_UAV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX2D_UAV {
    var MipSlice: UINT;
}
struct D3D11_TEX2D_ARRAY_UAV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_TEX3D_UAV {
    var MipSlice: UINT;
    var FirstWSlice: UINT;
    var WSize: UINT;
}
struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
    var Format: DXGI_FORMAT;
    var ViewDimension: UINT;
    var _2: union {
        var Buffer: D3D11_BUFFER_UAV;
        var Texture1D: D3D11_TEX1D_UAV;
        var Texture1DArray: D3D11_TEX1D_ARRAY_UAV;
        var Texture2D: D3D11_TEX2D_UAV;
        var Texture2DArray: D3D11_TEX2D_ARRAY_UAV;
        var Texture3D: D3D11_TEX3D_UAV;
    };
}
struct ID3D11UnorderedAccessView {
    using var vtbl: ^ID3D11UnorderedAccessViewVtbl;
}
struct ID3D11UnorderedAccessViewVtbl {
    var QueryInterface : proc(This: ^ID3D11UnorderedAccessView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11UnorderedAccessView) : ULONG;
    var Release : proc(This: ^ID3D11UnorderedAccessView) : ULONG;
    var GetDevice : proc(This: ^ID3D11UnorderedAccessView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11UnorderedAccessView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11UnorderedAccessView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11UnorderedAccessView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11UnorderedAccessView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11UnorderedAccessView, pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC);
}
struct ID3D11VertexShader {
    using var vtbl: ^ID3D11VertexShaderVtbl;
}
struct ID3D11VertexShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11VertexShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VertexShader) : ULONG;
    var Release : proc(This: ^ID3D11VertexShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11VertexShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VertexShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VertexShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VertexShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11HullShader {
    using var vtbl: ^ID3D11HullShaderVtbl;
}
struct ID3D11HullShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11HullShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11HullShader) : ULONG;
    var Release : proc(This: ^ID3D11HullShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11HullShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11HullShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11HullShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11HullShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11DomainShader {
    using var vtbl: ^ID3D11DomainShaderVtbl;
}
struct ID3D11DomainShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11DomainShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11DomainShader) : ULONG;
    var Release : proc(This: ^ID3D11DomainShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11DomainShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11DomainShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11DomainShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11DomainShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11GeometryShader {
    using var vtbl: ^ID3D11GeometryShaderVtbl;
}
struct ID3D11GeometryShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11GeometryShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11GeometryShader) : ULONG;
    var Release : proc(This: ^ID3D11GeometryShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11GeometryShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11GeometryShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11GeometryShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11GeometryShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11PixelShader {
    using var vtbl: ^ID3D11PixelShaderVtbl;
}
struct ID3D11PixelShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11PixelShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11PixelShader) : ULONG;
    var Release : proc(This: ^ID3D11PixelShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11PixelShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11PixelShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11PixelShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11PixelShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11ComputeShader {
    using var vtbl: ^ID3D11ComputeShaderVtbl;
}
struct ID3D11ComputeShaderVtbl {
    var QueryInterface : proc(This: ^ID3D11ComputeShader, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11ComputeShader) : ULONG;
    var Release : proc(This: ^ID3D11ComputeShader) : ULONG;
    var GetDevice : proc(This: ^ID3D11ComputeShader, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11ComputeShader, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11ComputeShader, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11ComputeShader, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11InputLayout {
    using var vtbl: ^ID3D11InputLayoutVtbl;
}
struct ID3D11InputLayoutVtbl {
    var QueryInterface : proc(This: ^ID3D11InputLayout, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11InputLayout) : ULONG;
    var Release : proc(This: ^ID3D11InputLayout) : ULONG;
    var GetDevice : proc(This: ^ID3D11InputLayout, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11InputLayout, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11InputLayout, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11InputLayout, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct D3D11_SAMPLER_DESC {
    var Filter: UINT;
    var AddressU: UINT;
    var AddressV: UINT;
    var AddressW: UINT;
    var MipLODBias: FLOAT;
    var MaxAnisotropy: UINT;
    var ComparisonFunc: UINT;
    var BorderColor: [4]FLOAT;
    var MinLOD: FLOAT;
    var MaxLOD: FLOAT;
}
struct ID3D11SamplerState {
    using var vtbl: ^ID3D11SamplerStateVtbl;
}
struct ID3D11SamplerStateVtbl {
    var QueryInterface : proc(This: ^ID3D11SamplerState, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11SamplerState) : ULONG;
    var Release : proc(This: ^ID3D11SamplerState) : ULONG;
    var GetDevice : proc(This: ^ID3D11SamplerState, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11SamplerState, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11SamplerState, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11SamplerState, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDesc : proc(This: ^ID3D11SamplerState, pDesc: ^D3D11_SAMPLER_DESC);
}
struct ID3D11Asynchronous {
    using var vtbl: ^ID3D11AsynchronousVtbl;
}
struct ID3D11AsynchronousVtbl {
    var QueryInterface : proc(This: ^ID3D11Asynchronous, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Asynchronous) : ULONG;
    var Release : proc(This: ^ID3D11Asynchronous) : ULONG;
    var GetDevice : proc(This: ^ID3D11Asynchronous, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Asynchronous, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Asynchronous, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Asynchronous, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDataSize : proc(This: ^ID3D11Asynchronous) : UINT;
}
struct D3D11_QUERY_DESC {
    var Query: UINT;
    var MiscFlags: UINT;
}
struct ID3D11Query {
    using var vtbl: ^ID3D11QueryVtbl;
}
struct ID3D11QueryVtbl {
    var QueryInterface : proc(This: ^ID3D11Query, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Query) : ULONG;
    var Release : proc(This: ^ID3D11Query) : ULONG;
    var GetDevice : proc(This: ^ID3D11Query, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Query, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Query, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Query, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDataSize : proc(This: ^ID3D11Query) : UINT;
    var GetDesc : proc(This: ^ID3D11Query, pDesc: ^D3D11_QUERY_DESC);
}
struct ID3D11Predicate {
    using var vtbl: ^ID3D11PredicateVtbl;
}
struct ID3D11PredicateVtbl {
    var QueryInterface : proc(This: ^ID3D11Predicate, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Predicate) : ULONG;
    var Release : proc(This: ^ID3D11Predicate) : ULONG;
    var GetDevice : proc(This: ^ID3D11Predicate, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Predicate, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Predicate, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Predicate, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDataSize : proc(This: ^ID3D11Predicate) : UINT;
    var GetDesc : proc(This: ^ID3D11Predicate, pDesc: ^D3D11_QUERY_DESC);
}
struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
    var Frequency: UINT64;
    var Disjoint: BOOL;
}
struct D3D11_QUERY_DATA_PIPELINE_STATISTICS {
    var IAVertices: UINT64;
    var IAPrimitives: UINT64;
    var VSInvocations: UINT64;
    var GSInvocations: UINT64;
    var GSPrimitives: UINT64;
    var CInvocations: UINT64;
    var CPrimitives: UINT64;
    var PSInvocations: UINT64;
    var HSInvocations: UINT64;
    var DSInvocations: UINT64;
    var CSInvocations: UINT64;
}
struct D3D11_QUERY_DATA_SO_STATISTICS {
    var NumPrimitivesWritten: UINT64;
    var PrimitivesStorageNeeded: UINT64;
}
struct D3D11_COUNTER_DESC {
    var Counter: UINT;
    var MiscFlags: UINT;
}
struct D3D11_COUNTER_INFO {
    var LastDeviceDependentCounter: UINT;
    var NumSimultaneousCounters: UINT;
    var NumDetectableParallelUnits: UINT8;
}
struct ID3D11Counter {
    using var vtbl: ^ID3D11CounterVtbl;
}
struct ID3D11CounterVtbl {
    var QueryInterface : proc(This: ^ID3D11Counter, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Counter) : ULONG;
    var Release : proc(This: ^ID3D11Counter) : ULONG;
    var GetDevice : proc(This: ^ID3D11Counter, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11Counter, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Counter, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Counter, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDataSize : proc(This: ^ID3D11Counter) : UINT;
    var GetDesc : proc(This: ^ID3D11Counter, pDesc: ^D3D11_COUNTER_DESC);
}
struct D3D11_CLASS_INSTANCE_DESC {
    var InstanceId: UINT;
    var InstanceIndex: UINT;
    var TypeId: UINT;
    var ConstantBuffer: UINT;
    var BaseConstantBufferOffset: UINT;
    var BaseTexture: UINT;
    var BaseSampler: UINT;
    var Created: BOOL;
}
struct ID3D11ClassInstance {
    using var vtbl: ^ID3D11ClassInstanceVtbl;
}
struct ID3D11ClassInstanceVtbl {
    var QueryInterface : proc(This: ^ID3D11ClassInstance, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11ClassInstance) : ULONG;
    var Release : proc(This: ^ID3D11ClassInstance) : ULONG;
    var GetDevice : proc(This: ^ID3D11ClassInstance, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11ClassInstance, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11ClassInstance, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11ClassInstance, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetClassLinkage : proc(This: ^ID3D11ClassInstance, ppLinkage: ^^ID3D11ClassLinkage);
    var GetDesc : proc(This: ^ID3D11ClassInstance, pDesc: ^D3D11_CLASS_INSTANCE_DESC);
    var GetInstanceName : proc(This: ^ID3D11ClassInstance, pInstanceName: LPSTR, pBufferLength: ^SIZE_T);
    var GetTypeName : proc(This: ^ID3D11ClassInstance, pTypeName: LPSTR, pBufferLength: ^SIZE_T);
}
struct ID3D11ClassLinkage {
    using var vtbl: ^ID3D11ClassLinkageVtbl;
}
struct ID3D11ClassLinkageVtbl {
    var QueryInterface : proc(This: ^ID3D11ClassLinkage, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11ClassLinkage) : ULONG;
    var Release : proc(This: ^ID3D11ClassLinkage) : ULONG;
    var GetDevice : proc(This: ^ID3D11ClassLinkage, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11ClassLinkage, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11ClassLinkage, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11ClassLinkage, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetClassInstance : proc(This: ^ID3D11ClassLinkage, pClassInstanceName: LPCSTR, InstanceIndex: UINT, ppInstance: ^^ID3D11ClassInstance) : HRESULT;
    var CreateClassInstance : proc(This: ^ID3D11ClassLinkage, pClassTypeName: LPCSTR, ConstantBufferOffset: UINT, ConstantVectorOffset: UINT, TextureOffset: UINT, SamplerOffset: UINT, ppInstance: ^^ID3D11ClassInstance) : HRESULT;
}
struct ID3D11CommandList {
    using var vtbl: ^ID3D11CommandListVtbl;
}
struct ID3D11CommandListVtbl {
    var QueryInterface : proc(This: ^ID3D11CommandList, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11CommandList) : ULONG;
    var Release : proc(This: ^ID3D11CommandList) : ULONG;
    var GetDevice : proc(This: ^ID3D11CommandList, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11CommandList, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11CommandList, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11CommandList, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetContextFlags : proc(This: ^ID3D11CommandList) : UINT;
}
struct D3D11_FEATURE_DATA_THREADING {
    var DriverConcurrentCreates: BOOL;
    var DriverCommandLists: BOOL;
}
struct D3D11_FEATURE_DATA_DOUBLES {
    var DoublePrecisionFloatShaderOps: BOOL;
}
struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
    var InFormat: DXGI_FORMAT;
    var OutFormatSupport: UINT;
}
struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
    var InFormat: DXGI_FORMAT;
    var OutFormatSupport2: UINT;
}
struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
    var ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS {
    var OutputMergerLogicOp: BOOL;
    var UAVOnlyRenderingForcedSampleCount: BOOL;
    var DiscardAPIsSeenByDriver: BOOL;
    var FlagsForUpdateAndCopySeenByDriver: BOOL;
    var ClearView: BOOL;
    var CopyWithOverlap: BOOL;
    var ConstantBufferPartialUpdate: BOOL;
    var ConstantBufferOffsetting: BOOL;
    var MapNoOverwriteOnDynamicConstantBuffer: BOOL;
    var MapNoOverwriteOnDynamicBufferSRV: BOOL;
    var MultisampleRTVWithForcedSampleCountOne: BOOL;
    var SAD4ShaderInstructions: BOOL;
    var ExtendedDoublesShaderInstructions: BOOL;
    var ExtendedResourceSharing: BOOL;
}
struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
    var TileBasedDeferredRenderer: BOOL;
}
struct D3D11_FEATURE_DATA_D3D9_OPTIONS {
    var FullNonPow2TextureSupport: BOOL;
}
struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
    var SupportsDepthAsTextureWithLessEqualComparisonFilter: BOOL;
}
struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
    var PixelShaderMinPrecision: UINT;
    var AllOtherShaderStagesMinPrecision: UINT;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
    var TiledResourcesTier: UINT;
    var MinMaxFiltering: BOOL;
    var ClearViewAlsoSupportsDepthOnlyFormats: BOOL;
    var MapOnDefaultBuffers: BOOL;
}
struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
    var SimpleInstancingSupported: BOOL;
}
struct D3D11_FEATURE_DATA_MARKER_SUPPORT {
    var Profile: BOOL;
}
struct D3D11_FEATURE_DATA_D3D9_OPTIONS1 {
    var FullNonPow2TextureSupported: BOOL;
    var DepthAsTextureWithLessEqualComparisonFilterSupported: BOOL;
    var SimpleInstancingSupported: BOOL;
    var TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: BOOL;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS2 {
    var PSSpecifiedStencilRefSupported: BOOL;
    var TypedUAVLoadAdditionalFormats: BOOL;
    var ROVsSupported: BOOL;
    var ConservativeRasterizationTier: UINT;
    var TiledResourcesTier: UINT;
    var MapOnDefaultTextures: BOOL;
    var StandardSwizzle: BOOL;
    var UnifiedMemoryArchitecture: BOOL;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS3 {
    var VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: BOOL;
}
struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    var MaxGPUVirtualAddressBitsPerResource: UINT;
    var MaxGPUVirtualAddressBitsPerProcess: UINT;
}
struct D3D11_FEATURE_DATA_SHADER_CACHE {
    var SupportFlags: UINT;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS5 {
    var SharedResourceTier: UINT;
}
struct ID3D11DeviceContext {
    using var vtbl: ^ID3D11DeviceContextVtbl;
}
struct ID3D11DeviceContextVtbl {
    var QueryInterface : proc(This: ^ID3D11DeviceContext, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11DeviceContext) : ULONG;
    var Release : proc(This: ^ID3D11DeviceContext) : ULONG;
    var GetDevice : proc(This: ^ID3D11DeviceContext, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11DeviceContext, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11DeviceContext, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11DeviceContext, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var VSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var PSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var PSSetShader : proc(This: ^ID3D11DeviceContext, pPixelShader: ^ID3D11PixelShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var PSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var VSSetShader : proc(This: ^ID3D11DeviceContext, pVertexShader: ^ID3D11VertexShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var DrawIndexed : proc(This: ^ID3D11DeviceContext, IndexCount: UINT, StartIndexLocation: UINT, BaseVertexLocation: INT);
    var Draw : proc(This: ^ID3D11DeviceContext, VertexCount: UINT, StartVertexLocation: UINT);
    var Map : proc(This: ^ID3D11DeviceContext, pResource: ^ID3D11Resource, Subresource: UINT, MapType: UINT, MapFlags: UINT, pMappedResource: ^D3D11_MAPPED_SUBRESOURCE) : HRESULT;
    var Unmap : proc(This: ^ID3D11DeviceContext, pResource: ^ID3D11Resource, Subresource: UINT);
    var PSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var IASetInputLayout : proc(This: ^ID3D11DeviceContext, pInputLayout: ^ID3D11InputLayout);
    var IASetVertexBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppVertexBuffers: ^^ID3D11Buffer, pStrides: ^UINT, pOffsets: ^UINT);
    var IASetIndexBuffer : proc(This: ^ID3D11DeviceContext, pIndexBuffer: ^ID3D11Buffer, Format: DXGI_FORMAT, Offset: UINT);
    var DrawIndexedInstanced : proc(This: ^ID3D11DeviceContext, IndexCountPerInstance: UINT, InstanceCount: UINT, StartIndexLocation: UINT, BaseVertexLocation: INT, StartInstanceLocation: UINT);
    var DrawInstanced : proc(This: ^ID3D11DeviceContext, VertexCountPerInstance: UINT, InstanceCount: UINT, StartVertexLocation: UINT, StartInstanceLocation: UINT);
    var GSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var GSSetShader : proc(This: ^ID3D11DeviceContext, pShader: ^ID3D11GeometryShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var IASetPrimitiveTopology : proc(This: ^ID3D11DeviceContext, Topology: D3D11_PRIMITIVE_TOPOLOGY);
    var VSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var VSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var Begin : proc(This: ^ID3D11DeviceContext, pAsync: ^ID3D11Asynchronous);
    var End : proc(This: ^ID3D11DeviceContext, pAsync: ^ID3D11Asynchronous);
    var GetData : proc(This: ^ID3D11DeviceContext, pAsync: ^ID3D11Asynchronous, pData: rawptr, DataSize: UINT, GetDataFlags: UINT) : HRESULT;
    var SetPredication : proc(This: ^ID3D11DeviceContext, pPredicate: ^ID3D11Predicate, PredicateValue: BOOL);
    var GSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var GSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var OMSetRenderTargets : proc(This: ^ID3D11DeviceContext, NumViews: UINT, ppRenderTargetViews: ^^ID3D11RenderTargetView, pDepthStencilView: ^ID3D11DepthStencilView);
    var OMSetRenderTargetsAndUnorderedAccessViews : proc(This: ^ID3D11DeviceContext, NumRTVs: UINT, ppRenderTargetViews: ^^ID3D11RenderTargetView, pDepthStencilView: ^ID3D11DepthStencilView, UAVStartSlot: UINT, NumUAVs: UINT, ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView, pUAVInitialCounts: ^UINT);
    var OMSetBlendState : proc(This: ^ID3D11DeviceContext, pBlendState: ^ID3D11BlendState, BlendFactor: ^FLOAT, SampleMask: UINT);
    var OMSetDepthStencilState : proc(This: ^ID3D11DeviceContext, pDepthStencilState: ^ID3D11DepthStencilState, StencilRef: UINT);
    var SOSetTargets : proc(This: ^ID3D11DeviceContext, NumBuffers: UINT, ppSOTargets: ^^ID3D11Buffer, pOffsets: ^UINT);
    var DrawAuto : proc(This: ^ID3D11DeviceContext);
    var DrawIndexedInstancedIndirect : proc(This: ^ID3D11DeviceContext, pBufferForArgs: ^ID3D11Buffer, AlignedByteOffsetForArgs: UINT);
    var DrawInstancedIndirect : proc(This: ^ID3D11DeviceContext, pBufferForArgs: ^ID3D11Buffer, AlignedByteOffsetForArgs: UINT);
    var Dispatch : proc(This: ^ID3D11DeviceContext, ThreadGroupCountX: UINT, ThreadGroupCountY: UINT, ThreadGroupCountZ: UINT);
    var DispatchIndirect : proc(This: ^ID3D11DeviceContext, pBufferForArgs: ^ID3D11Buffer, AlignedByteOffsetForArgs: UINT);
    var RSSetState : proc(This: ^ID3D11DeviceContext, pRasterizerState: ^ID3D11RasterizerState);
    var RSSetViewports : proc(This: ^ID3D11DeviceContext, NumViewports: UINT, pViewports: ^D3D11_VIEWPORT);
    var RSSetScissorRects : proc(This: ^ID3D11DeviceContext, NumRects: UINT, pRects: ^D3D11_RECT);
    var CopySubresourceRegion : proc(This: ^ID3D11DeviceContext, pDstResource: ^ID3D11Resource, DstSubresource: UINT, DstX: UINT, DstY: UINT, DstZ: UINT, pSrcResource: ^ID3D11Resource, SrcSubresource: UINT, pSrcBox: ^D3D11_BOX);
    var CopyResource : proc(This: ^ID3D11DeviceContext, pDstResource: ^ID3D11Resource, pSrcResource: ^ID3D11Resource);
    var UpdateSubresource : proc(This: ^ID3D11DeviceContext, pDstResource: ^ID3D11Resource, DstSubresource: UINT, pDstBox: ^D3D11_BOX, pSrcData: rawptr, SrcRowPitch: UINT, SrcDepthPitch: UINT);
    var CopyStructureCount : proc(This: ^ID3D11DeviceContext, pDstBuffer: ^ID3D11Buffer, DstAlignedByteOffset: UINT, pSrcView: ^ID3D11UnorderedAccessView);
    var ClearRenderTargetView : proc(This: ^ID3D11DeviceContext, pRenderTargetView: ^ID3D11RenderTargetView, ColorRGBA: ^FLOAT);
    var ClearUnorderedAccessViewUint : proc(This: ^ID3D11DeviceContext, pUnorderedAccessView: ^ID3D11UnorderedAccessView, Values: ^UINT);
    var ClearUnorderedAccessViewFloat : proc(This: ^ID3D11DeviceContext, pUnorderedAccessView: ^ID3D11UnorderedAccessView, Values: ^FLOAT);
    var ClearDepthStencilView : proc(This: ^ID3D11DeviceContext, pDepthStencilView: ^ID3D11DepthStencilView, ClearFlags: UINT, Depth: FLOAT, Stencil: UINT8);
    var GenerateMips : proc(This: ^ID3D11DeviceContext, pShaderResourceView: ^ID3D11ShaderResourceView);
    var SetResourceMinLOD : proc(This: ^ID3D11DeviceContext, pResource: ^ID3D11Resource, MinLOD: FLOAT);
    var GetResourceMinLOD : proc(This: ^ID3D11DeviceContext, pResource: ^ID3D11Resource) : FLOAT;
    var ResolveSubresource : proc(This: ^ID3D11DeviceContext, pDstResource: ^ID3D11Resource, DstSubresource: UINT, pSrcResource: ^ID3D11Resource, SrcSubresource: UINT, Format: DXGI_FORMAT);
    var ExecuteCommandList : proc(This: ^ID3D11DeviceContext, pCommandList: ^ID3D11CommandList, RestoreContextState: BOOL);
    var HSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var HSSetShader : proc(This: ^ID3D11DeviceContext, pHullShader: ^ID3D11HullShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var HSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var HSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var DSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var DSSetShader : proc(This: ^ID3D11DeviceContext, pDomainShader: ^ID3D11DomainShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var DSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var DSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var CSSetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var CSSetUnorderedAccessViews : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumUAVs: UINT, ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView, pUAVInitialCounts: ^UINT);
    var CSSetShader : proc(This: ^ID3D11DeviceContext, pComputeShader: ^ID3D11ComputeShader, ppClassInstances: ^^ID3D11ClassInstance, NumClassInstances: UINT);
    var CSSetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var CSSetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var VSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var PSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var PSGetShader : proc(This: ^ID3D11DeviceContext, ppPixelShader: ^^ID3D11PixelShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var PSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var VSGetShader : proc(This: ^ID3D11DeviceContext, ppVertexShader: ^^ID3D11VertexShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var PSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var IAGetInputLayout : proc(This: ^ID3D11DeviceContext, ppInputLayout: ^^ID3D11InputLayout);
    var IAGetVertexBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppVertexBuffers: ^^ID3D11Buffer, pStrides: ^UINT, pOffsets: ^UINT);
    var IAGetIndexBuffer : proc(This: ^ID3D11DeviceContext, pIndexBuffer: ^^ID3D11Buffer, Format: ^DXGI_FORMAT, Offset: ^UINT);
    var GSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var GSGetShader : proc(This: ^ID3D11DeviceContext, ppGeometryShader: ^^ID3D11GeometryShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var IAGetPrimitiveTopology : proc(This: ^ID3D11DeviceContext, pTopology: ^D3D11_PRIMITIVE_TOPOLOGY);
    var VSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var VSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var GetPredication : proc(This: ^ID3D11DeviceContext, ppPredicate: ^^ID3D11Predicate, pPredicateValue: ^BOOL);
    var GSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var GSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var OMGetRenderTargets : proc(This: ^ID3D11DeviceContext, NumViews: UINT, ppRenderTargetViews: ^^ID3D11RenderTargetView, ppDepthStencilView: ^^ID3D11DepthStencilView);
    var OMGetRenderTargetsAndUnorderedAccessViews : proc(This: ^ID3D11DeviceContext, NumRTVs: UINT, ppRenderTargetViews: ^^ID3D11RenderTargetView, ppDepthStencilView: ^^ID3D11DepthStencilView, UAVStartSlot: UINT, NumUAVs: UINT, ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView);
    var OMGetBlendState : proc(This: ^ID3D11DeviceContext, ppBlendState: ^^ID3D11BlendState, BlendFactor: ^FLOAT, pSampleMask: ^UINT);
    var OMGetDepthStencilState : proc(This: ^ID3D11DeviceContext, ppDepthStencilState: ^^ID3D11DepthStencilState, pStencilRef: ^UINT);
    var SOGetTargets : proc(This: ^ID3D11DeviceContext, NumBuffers: UINT, ppSOTargets: ^^ID3D11Buffer);
    var RSGetState : proc(This: ^ID3D11DeviceContext, ppRasterizerState: ^^ID3D11RasterizerState);
    var RSGetViewports : proc(This: ^ID3D11DeviceContext, pNumViewports: ^UINT, pViewports: ^D3D11_VIEWPORT);
    var RSGetScissorRects : proc(This: ^ID3D11DeviceContext, pNumRects: ^UINT, pRects: ^D3D11_RECT);
    var HSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var HSGetShader : proc(This: ^ID3D11DeviceContext, ppHullShader: ^^ID3D11HullShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var HSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var HSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var DSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var DSGetShader : proc(This: ^ID3D11DeviceContext, ppDomainShader: ^^ID3D11DomainShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var DSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var DSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var CSGetShaderResources : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumViews: UINT, ppShaderResourceViews: ^^ID3D11ShaderResourceView);
    var CSGetUnorderedAccessViews : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumUAVs: UINT, ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView);
    var CSGetShader : proc(This: ^ID3D11DeviceContext, ppComputeShader: ^^ID3D11ComputeShader, ppClassInstances: ^^ID3D11ClassInstance, pNumClassInstances: ^UINT);
    var CSGetSamplers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumSamplers: UINT, ppSamplers: ^^ID3D11SamplerState);
    var CSGetConstantBuffers : proc(This: ^ID3D11DeviceContext, StartSlot: UINT, NumBuffers: UINT, ppConstantBuffers: ^^ID3D11Buffer);
    var ClearState : proc(This: ^ID3D11DeviceContext);
    var Flush : proc(This: ^ID3D11DeviceContext);
    var GetType : proc(This: ^ID3D11DeviceContext) : D3D11_DEVICE_CONTEXT_TYPE;
    var GetContextFlags : proc(This: ^ID3D11DeviceContext) : UINT;
    var FinishCommandList : proc(This: ^ID3D11DeviceContext, RestoreDeferredContextState: BOOL, ppCommandList: ^^ID3D11CommandList) : HRESULT;
}
struct D3D11_VIDEO_DECODER_DESC {
    var Guid: GUID;
    var SampleWidth: UINT;
    var SampleHeight: UINT;
    var OutputFormat: DXGI_FORMAT;
}
struct D3D11_VIDEO_DECODER_CONFIG {
    var guidConfigBitstreamEncryption: GUID;
    var guidConfigMBcontrolEncryption: GUID;
    var guidConfigResidDiffEncryption: GUID;
    var ConfigBitstreamRaw: UINT;
    var ConfigMBcontrolRasterOrder: UINT;
    var ConfigResidDiffHost: UINT;
    var ConfigSpatialResid8: UINT;
    var ConfigResid8Subtraction: UINT;
    var ConfigSpatialHost8or9Clipping: UINT;
    var ConfigSpatialResidInterleaved: UINT;
    var ConfigIntraResidUnsigned: UINT;
    var ConfigResidDiffAccelerator: UINT;
    var ConfigHostInverseScan: UINT;
    var ConfigSpecificIDCT: UINT;
    var Config4GroupedCoefs: UINT;
    var ConfigMinRenderTargetBuffCount: USHORT;
    var ConfigDecoderSpecific: USHORT;
}
struct _D3D11_AES_CTR_IV {
    var IV: UINT64;
    var Count: UINT64;
}
struct D3D11_ENCRYPTED_BLOCK_INFO {
    var NumEncryptedBytesAtBeginning: UINT;
    var NumBytesInSkipPattern: UINT;
    var NumBytesInEncryptPattern: UINT;
}
struct D3D11_VIDEO_DECODER_BUFFER_DESC {
    var BufferType: UINT;
    var BufferIndex: UINT;
    var DataOffset: UINT;
    var DataSize: UINT;
    var FirstMBaddress: UINT;
    var NumMBsInBuffer: UINT;
    var Width: UINT;
    var Height: UINT;
    var Stride: UINT;
    var ReservedBits: UINT;
    var pIV: rawptr;
    var IVSize: UINT;
    var PartialEncryption: BOOL;
    var EncryptedBlockInfo: D3D11_ENCRYPTED_BLOCK_INFO;
}
struct D3D11_VIDEO_DECODER_EXTENSION {
    var Function: UINT;
    var pPrivateInputData: rawptr;
    var PrivateInputDataSize: UINT;
    var pPrivateOutputData: rawptr;
    var PrivateOutputDataSize: UINT;
    var ResourceCount: UINT;
    var ppResourceList: ^^ID3D11Resource;
}
struct ID3D11VideoDecoder {
    using var vtbl: ^ID3D11VideoDecoderVtbl;
}
struct ID3D11VideoDecoderVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoDecoder, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoDecoder) : ULONG;
    var Release : proc(This: ^ID3D11VideoDecoder) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoDecoder, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoDecoder, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoDecoder, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoDecoder, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetCreationParameters : proc(This: ^ID3D11VideoDecoder, pVideoDesc: ^D3D11_VIDEO_DECODER_DESC, pConfig: ^D3D11_VIDEO_DECODER_CONFIG) : HRESULT;
    var GetDriverHandle : proc(This: ^ID3D11VideoDecoder, pDriverHandle: ^HANDLE) : HRESULT;
}
struct D3D11_VIDEO_PROCESSOR_CAPS {
    var DeviceCaps: UINT;
    var FeatureCaps: UINT;
    var FilterCaps: UINT;
    var InputFormatCaps: UINT;
    var AutoStreamCaps: UINT;
    var StereoCaps: UINT;
    var RateConversionCapsCount: UINT;
    var MaxInputStreams: UINT;
    var MaxStreamStates: UINT;
}
struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS {
    var PastFrames: UINT;
    var FutureFrames: UINT;
    var ProcessorCaps: UINT;
    var ITelecineCaps: UINT;
    var CustomRateCount: UINT;
}
struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS {
    var Caps: UINT;
    var KeyExchangeTypeCount: UINT;
    var BlockAlignmentSize: UINT;
    var ProtectedMemorySize: ULONGLONG;
}
struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE {
    var CustomRate: DXGI_RATIONAL;
    var OutputFrames: UINT;
    var InputInterlaced: BOOL;
    var InputFramesOrFields: UINT;
}
struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE {
    var Minimum: int;
    var Maximum: int;
    var Default: int;
    var Multiplier: float;
}
struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC {
    var InputFrameFormat: UINT;
    var InputFrameRate: DXGI_RATIONAL;
    var InputWidth: UINT;
    var InputHeight: UINT;
    var OutputFrameRate: DXGI_RATIONAL;
    var OutputWidth: UINT;
    var OutputHeight: UINT;
    var Usage: UINT;
}
struct ID3D11VideoProcessorEnumerator {
    using var vtbl: ^ID3D11VideoProcessorEnumeratorVtbl;
}
struct ID3D11VideoProcessorEnumeratorVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoProcessorEnumerator, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoProcessorEnumerator) : ULONG;
    var Release : proc(This: ^ID3D11VideoProcessorEnumerator) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoProcessorEnumerator, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoProcessorEnumerator, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoProcessorEnumerator, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoProcessorEnumerator, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetVideoProcessorContentDesc : proc(This: ^ID3D11VideoProcessorEnumerator, pContentDesc: ^D3D11_VIDEO_PROCESSOR_CONTENT_DESC) : HRESULT;
    var CheckVideoProcessorFormat : proc(This: ^ID3D11VideoProcessorEnumerator, Format: DXGI_FORMAT, pFlags: ^UINT) : HRESULT;
    var GetVideoProcessorCaps : proc(This: ^ID3D11VideoProcessorEnumerator, pCaps: ^D3D11_VIDEO_PROCESSOR_CAPS) : HRESULT;
    var GetVideoProcessorRateConversionCaps : proc(This: ^ID3D11VideoProcessorEnumerator, TypeIndex: UINT, pCaps: ^D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) : HRESULT;
    var GetVideoProcessorCustomRate : proc(This: ^ID3D11VideoProcessorEnumerator, TypeIndex: UINT, CustomRateIndex: UINT, pRate: ^D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) : HRESULT;
    var GetVideoProcessorFilterRange : proc(This: ^ID3D11VideoProcessorEnumerator, Filter: UINT, pRange: ^D3D11_VIDEO_PROCESSOR_FILTER_RANGE) : HRESULT;
}
struct D3D11_VIDEO_COLOR_RGBA {
    var R: float;
    var G: float;
    var B: float;
    var A: float;
}
struct D3D11_VIDEO_COLOR_YCbCrA {
    var Y: float;
    var Cb: float;
    var Cr: float;
    var A: float;
}
struct D3D11_VIDEO_COLOR {
    var _0: union {
        var YCbCr: D3D11_VIDEO_COLOR_YCbCrA;
        var RGBA: D3D11_VIDEO_COLOR_RGBA;
    };
}
struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE {
    var Usage: UINT;
    var RGB_Range: UINT;
    var YCbCr_Matrix: UINT;
    var YCbCr_xvYCC: UINT;
    var Nominal_Range: UINT;
    var Reserved: UINT;
}
struct D3D11_VIDEO_PROCESSOR_STREAM {
    var Enable: BOOL;
    var OutputIndex: UINT;
    var InputFrameOrField: UINT;
    var PastFrames: UINT;
    var FutureFrames: UINT;
    var ppPastSurfaces: ^^ID3D11VideoProcessorInputView;
    var pInputSurface: ^ID3D11VideoProcessorInputView;
    var ppFutureSurfaces: ^^ID3D11VideoProcessorInputView;
    var ppPastSurfacesRight: ^^ID3D11VideoProcessorInputView;
    var pInputSurfaceRight: ^ID3D11VideoProcessorInputView;
    var ppFutureSurfacesRight: ^^ID3D11VideoProcessorInputView;
}
struct ID3D11VideoProcessor {
    using var vtbl: ^ID3D11VideoProcessorVtbl;
}
struct ID3D11VideoProcessorVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoProcessor, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoProcessor) : ULONG;
    var Release : proc(This: ^ID3D11VideoProcessor) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoProcessor, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoProcessor, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoProcessor, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoProcessor, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetContentDesc : proc(This: ^ID3D11VideoProcessor, pDesc: ^D3D11_VIDEO_PROCESSOR_CONTENT_DESC);
    var GetRateConversionCaps : proc(This: ^ID3D11VideoProcessor, pCaps: ^D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS);
}
struct D3D11_OMAC {
    var Omac: [16]BYTE;
}
struct ID3D11AuthenticatedChannel {
    using var vtbl: ^ID3D11AuthenticatedChannelVtbl;
}
struct ID3D11AuthenticatedChannelVtbl {
    var QueryInterface : proc(This: ^ID3D11AuthenticatedChannel, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11AuthenticatedChannel) : ULONG;
    var Release : proc(This: ^ID3D11AuthenticatedChannel) : ULONG;
    var GetDevice : proc(This: ^ID3D11AuthenticatedChannel, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11AuthenticatedChannel, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11AuthenticatedChannel, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11AuthenticatedChannel, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetCertificateSize : proc(This: ^ID3D11AuthenticatedChannel, pCertificateSize: ^UINT) : HRESULT;
    var GetCertificate : proc(This: ^ID3D11AuthenticatedChannel, CertificateSize: UINT, pCertificate: ^BYTE) : HRESULT;
    var GetChannelHandle : proc(This: ^ID3D11AuthenticatedChannel, pChannelHandle: ^HANDLE);
}
struct D3D11_AUTHENTICATED_QUERY_INPUT {
    var QueryType: GUID;
    var hChannel: HANDLE;
    var SequenceNumber: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT {
    var omac: D3D11_OMAC;
    var QueryType: GUID;
    var hChannel: HANDLE;
    var SequenceNumber: UINT;
    var ReturnCode: HRESULT;
}
struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var ProtectionFlags: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}
struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var ChannelType: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var DeviceHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT {
    var Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    var DecoderHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var DecoderHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
    var DeviceHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var RestrictedSharedResourceProcessCount: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT {
    var Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    var ProcessIndex: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var ProcessIndex: UINT;
    var ProcessIdentifier: UINT;
    var ProcessHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var UnrestrictedProtectedSharedResourceCount: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT {
    var Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    var DeviceHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var DeviceHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
    var OutputIDCount: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT {
    var Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    var DeviceHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
    var OutputIDIndex: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var DeviceHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
    var OutputIDIndex: UINT;
    var OutputID: UINT64;
}
struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var BusType: UINT;
    var AccessibleInContiguousBlocks: BOOL;
    var AccessibleInNonContiguousBlocks: BOOL;
}
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var EncryptionGuidCount: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT {
    var Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    var EncryptionGuidIndex: UINT;
}
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var EncryptionGuidIndex: UINT;
    var EncryptionGuid: GUID;
}
struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT {
    var Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    var EncryptionGuid: GUID;
}
struct D3D11_AUTHENTICATED_CONFIGURE_INPUT {
    var omac: D3D11_OMAC;
    var ConfigureType: GUID;
    var hChannel: HANDLE;
    var SequenceNumber: UINT;
}
struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT {
    var omac: D3D11_OMAC;
    var ConfigureType: GUID;
    var hChannel: HANDLE;
    var SequenceNumber: UINT;
    var ReturnCode: HRESULT;
}
struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT {
    var Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    var StartSequenceQuery: UINT;
    var StartSequenceConfigure: UINT;
}
struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT {
    var Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    var Protections: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}
struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT {
    var Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    var DecoderHandle: HANDLE;
    var CryptoSessionHandle: HANDLE;
    var DeviceHandle: HANDLE;
}
struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT {
    var Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    var ProcessType: UINT;
    var ProcessHandle: HANDLE;
    var AllowAccess: BOOL;
}
struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT {
    var Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    var EncryptionGuid: GUID;
}
struct ID3D11CryptoSession {
    using var vtbl: ^ID3D11CryptoSessionVtbl;
}
struct ID3D11CryptoSessionVtbl {
    var QueryInterface : proc(This: ^ID3D11CryptoSession, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11CryptoSession) : ULONG;
    var Release : proc(This: ^ID3D11CryptoSession) : ULONG;
    var GetDevice : proc(This: ^ID3D11CryptoSession, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11CryptoSession, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11CryptoSession, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11CryptoSession, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetCryptoType : proc(This: ^ID3D11CryptoSession, pCryptoType: ^GUID);
    var GetDecoderProfile : proc(This: ^ID3D11CryptoSession, pDecoderProfile: ^GUID);
    var GetCertificateSize : proc(This: ^ID3D11CryptoSession, pCertificateSize: ^UINT) : HRESULT;
    var GetCertificate : proc(This: ^ID3D11CryptoSession, CertificateSize: UINT, pCertificate: ^BYTE) : HRESULT;
    var GetCryptoSessionHandle : proc(This: ^ID3D11CryptoSession, pCryptoSessionHandle: ^HANDLE);
}
struct D3D11_TEX2D_VDOV {
    var ArraySlice: UINT;
}
struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC {
    var DecodeProfile: GUID;
    var ViewDimension: UINT;
    var _2: union {
        var Texture2D: D3D11_TEX2D_VDOV;
    };
}
struct ID3D11VideoDecoderOutputView {
    using var vtbl: ^ID3D11VideoDecoderOutputViewVtbl;
}
struct ID3D11VideoDecoderOutputViewVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoDecoderOutputView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoDecoderOutputView) : ULONG;
    var Release : proc(This: ^ID3D11VideoDecoderOutputView) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoDecoderOutputView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoDecoderOutputView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoDecoderOutputView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoDecoderOutputView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11VideoDecoderOutputView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11VideoDecoderOutputView, pDesc: ^D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC);
}
struct D3D11_TEX2D_VPIV {
    var MipSlice: UINT;
    var ArraySlice: UINT;
}
struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC {
    var FourCC: UINT;
    var ViewDimension: UINT;
    var _2: union {
        var Texture2D: D3D11_TEX2D_VPIV;
    };
}
struct ID3D11VideoProcessorInputView {
    using var vtbl: ^ID3D11VideoProcessorInputViewVtbl;
}
struct ID3D11VideoProcessorInputViewVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoProcessorInputView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoProcessorInputView) : ULONG;
    var Release : proc(This: ^ID3D11VideoProcessorInputView) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoProcessorInputView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoProcessorInputView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoProcessorInputView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoProcessorInputView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11VideoProcessorInputView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11VideoProcessorInputView, pDesc: ^D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC);
}
struct D3D11_TEX2D_VPOV {
    var MipSlice: UINT;
}
struct D3D11_TEX2D_ARRAY_VPOV {
    var MipSlice: UINT;
    var FirstArraySlice: UINT;
    var ArraySize: UINT;
}
struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC {
    var ViewDimension: UINT;
    var _1: union {
        var Texture2D: D3D11_TEX2D_VPOV;
        var Texture2DArray: D3D11_TEX2D_ARRAY_VPOV;
    };
}
struct ID3D11VideoProcessorOutputView {
    using var vtbl: ^ID3D11VideoProcessorOutputViewVtbl;
}
struct ID3D11VideoProcessorOutputViewVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoProcessorOutputView, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoProcessorOutputView) : ULONG;
    var Release : proc(This: ^ID3D11VideoProcessorOutputView) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoProcessorOutputView, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoProcessorOutputView, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoProcessorOutputView, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoProcessorOutputView, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetResource : proc(This: ^ID3D11VideoProcessorOutputView, ppResource: ^^ID3D11Resource);
    var GetDesc : proc(This: ^ID3D11VideoProcessorOutputView, pDesc: ^D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC);
}
struct ID3D11VideoContext {
    using var vtbl: ^ID3D11VideoContextVtbl;
}
struct ID3D11VideoContextVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoContext, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoContext) : ULONG;
    var Release : proc(This: ^ID3D11VideoContext) : ULONG;
    var GetDevice : proc(This: ^ID3D11VideoContext, ppDevice: ^^ID3D11Device);
    var GetPrivateData : proc(This: ^ID3D11VideoContext, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoContext, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoContext, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetDecoderBuffer : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder, Type: UINT, pBufferSize: ^UINT, ppBuffer: ^rawptr) : HRESULT;
    var ReleaseDecoderBuffer : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder, Type: UINT) : HRESULT;
    var DecoderBeginFrame : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder, pView: ^ID3D11VideoDecoderOutputView, ContentKeySize: UINT, pContentKey: rawptr) : HRESULT;
    var DecoderEndFrame : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder) : HRESULT;
    var SubmitDecoderBuffers : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC) : HRESULT;
    var DecoderExtension : proc(This: ^ID3D11VideoContext, pDecoder: ^ID3D11VideoDecoder, pExtensionData: ^D3D11_VIDEO_DECODER_EXTENSION) : APP_DEPRECATED_HRESULT;
    var VideoProcessorSetOutputTargetRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, pRect: ^RECT);
    var VideoProcessorSetOutputBackgroundColor : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, YCbCr: BOOL, pColor: ^D3D11_VIDEO_COLOR);
    var VideoProcessorSetOutputColorSpace : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE);
    var VideoProcessorSetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, AlphaFillMode: UINT, StreamIndex: UINT);
    var VideoProcessorSetOutputConstriction : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, Size: SIZE);
    var VideoProcessorSetOutputStereoMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL);
    var VideoProcessorSetOutputExtension : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) : APP_DEPRECATED_HRESULT;
    var VideoProcessorGetOutputTargetRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, Enabled: ^BOOL, pRect: ^RECT);
    var VideoProcessorGetOutputBackgroundColor : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pYCbCr: ^BOOL, pColor: ^D3D11_VIDEO_COLOR);
    var VideoProcessorGetOutputColorSpace : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE);
    var VideoProcessorGetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pAlphaFillMode: ^UINT, pStreamIndex: ^UINT);
    var VideoProcessorGetOutputConstriction : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL, pSize: ^SIZE);
    var VideoProcessorGetOutputStereoMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL);
    var VideoProcessorGetOutputExtension : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) : APP_DEPRECATED_HRESULT;
    var VideoProcessorSetStreamFrameFormat : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, FrameFormat: UINT);
    var VideoProcessorSetStreamColorSpace : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE);
    var VideoProcessorSetStreamOutputRate : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, OutputRate: UINT, RepeatFrame: BOOL, pCustomRate: ^DXGI_RATIONAL);
    var VideoProcessorSetStreamSourceRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT);
    var VideoProcessorSetStreamDestRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT);
    var VideoProcessorSetStreamAlpha : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Alpha: FLOAT);
    var VideoProcessorSetStreamPalette : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT);
    var VideoProcessorSetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL);
    var VideoProcessorSetStreamLumaKey : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Lower: FLOAT, Upper: FLOAT);
    var VideoProcessorSetStreamStereoFormat : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Format: UINT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: UINT, MonoOffset: int);
    var VideoProcessorSetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL);
    var VideoProcessorSetStreamFilter : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: UINT, Enable: BOOL, Level: int);
    var VideoProcessorSetStreamExtension : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) : APP_DEPRECATED_HRESULT;
    var VideoProcessorGetStreamFrameFormat : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pFrameFormat: ^UINT);
    var VideoProcessorGetStreamColorSpace : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE);
    var VideoProcessorGetStreamOutputRate : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pOutputRate: ^UINT, pRepeatFrame: ^BOOL, pCustomRate: ^DXGI_RATIONAL);
    var VideoProcessorGetStreamSourceRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT);
    var VideoProcessorGetStreamDestRect : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT);
    var VideoProcessorGetStreamAlpha : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pAlpha: ^FLOAT);
    var VideoProcessorGetStreamPalette : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT);
    var VideoProcessorGetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL);
    var VideoProcessorGetStreamLumaKey : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pLower: ^FLOAT, pUpper: ^FLOAT);
    var VideoProcessorGetStreamStereoFormat : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pFormat: ^UINT, pLeftViewFrame0: ^BOOL, pBaseViewFrame0: ^BOOL, pFlipMode: ^UINT, MonoOffset: ^int);
    var VideoProcessorGetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL);
    var VideoProcessorGetStreamFilter : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: UINT, pEnabled: ^BOOL, pLevel: ^int);
    var VideoProcessorGetStreamExtension : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) : APP_DEPRECATED_HRESULT;
    var VideoProcessorBlt : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, pView: ^ID3D11VideoProcessorOutputView, OutputFrame: UINT, StreamCount: UINT, pStreams: ^D3D11_VIDEO_PROCESSOR_STREAM) : HRESULT;
    var NegotiateCryptoSessionKeyExchange : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession, DataSize: UINT, pData: rawptr) : HRESULT;
    var EncryptionBlt : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, IVSize: UINT, pIV: rawptr);
    var DecryptionBlt : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, pEncryptedBlockInfo: ^D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: UINT, pContentKey: rawptr, IVSize: UINT, pIV: rawptr);
    var StartSessionKeyRefresh : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession, RandomNumberSize: UINT, pRandomNumber: rawptr);
    var FinishSessionKeyRefresh : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession);
    var GetEncryptionBltKey : proc(This: ^ID3D11VideoContext, pCryptoSession: ^ID3D11CryptoSession, KeySize: UINT, pReadbackKey: rawptr) : HRESULT;
    var NegotiateAuthenticatedChannelKeyExchange : proc(This: ^ID3D11VideoContext, pChannel: ^ID3D11AuthenticatedChannel, DataSize: UINT, pData: rawptr) : HRESULT;
    var QueryAuthenticatedChannel : proc(This: ^ID3D11VideoContext, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, OutputSize: UINT, pOutput: rawptr) : HRESULT;
    var ConfigureAuthenticatedChannel : proc(This: ^ID3D11VideoContext, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, pOutput: ^D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) : HRESULT;
    var VideoProcessorSetStreamRotation : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Rotation: UINT);
    var VideoProcessorGetStreamRotation : proc(This: ^ID3D11VideoContext, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pRotation: ^UINT);
}
struct ID3D11VideoDevice {
    using var vtbl: ^ID3D11VideoDeviceVtbl;
}
struct ID3D11VideoDeviceVtbl {
    var QueryInterface : proc(This: ^ID3D11VideoDevice, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11VideoDevice) : ULONG;
    var Release : proc(This: ^ID3D11VideoDevice) : ULONG;
    var CreateVideoDecoder : proc(This: ^ID3D11VideoDevice, pVideoDesc: ^D3D11_VIDEO_DECODER_DESC, pConfig: ^D3D11_VIDEO_DECODER_CONFIG, ppDecoder: ^^ID3D11VideoDecoder) : HRESULT;
    var CreateVideoProcessor : proc(This: ^ID3D11VideoDevice, pEnum: ^ID3D11VideoProcessorEnumerator, RateConversionIndex: UINT, ppVideoProcessor: ^^ID3D11VideoProcessor) : HRESULT;
    var CreateAuthenticatedChannel : proc(This: ^ID3D11VideoDevice, ChannelType: UINT, ppAuthenticatedChannel: ^^ID3D11AuthenticatedChannel) : HRESULT;
    var CreateCryptoSession : proc(This: ^ID3D11VideoDevice, pCryptoType: ^GUID, pDecoderProfile: ^GUID, pKeyExchangeType: ^GUID, ppCryptoSession: ^^ID3D11CryptoSession) : HRESULT;
    var CreateVideoDecoderOutputView : proc(This: ^ID3D11VideoDevice, pResource: ^ID3D11Resource, pDesc: ^D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView: ^^ID3D11VideoDecoderOutputView) : HRESULT;
    var CreateVideoProcessorInputView : proc(This: ^ID3D11VideoDevice, pResource: ^ID3D11Resource, pEnum: ^ID3D11VideoProcessorEnumerator, pDesc: ^D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView: ^^ID3D11VideoProcessorInputView) : HRESULT;
    var CreateVideoProcessorOutputView : proc(This: ^ID3D11VideoDevice, pResource: ^ID3D11Resource, pEnum: ^ID3D11VideoProcessorEnumerator, pDesc: ^D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView: ^^ID3D11VideoProcessorOutputView) : HRESULT;
    var CreateVideoProcessorEnumerator : proc(This: ^ID3D11VideoDevice, pDesc: ^D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum: ^^ID3D11VideoProcessorEnumerator) : HRESULT;
    var GetVideoDecoderProfileCount : proc(This: ^ID3D11VideoDevice) : UINT;
    var GetVideoDecoderProfile : proc(This: ^ID3D11VideoDevice, Index: UINT, pDecoderProfile: ^GUID) : HRESULT;
    var CheckVideoDecoderFormat : proc(This: ^ID3D11VideoDevice, pDecoderProfile: ^GUID, Format: DXGI_FORMAT, pSupported: ^BOOL) : HRESULT;
    var GetVideoDecoderConfigCount : proc(This: ^ID3D11VideoDevice, pDesc: ^D3D11_VIDEO_DECODER_DESC, pCount: ^UINT) : HRESULT;
    var GetVideoDecoderConfig : proc(This: ^ID3D11VideoDevice, pDesc: ^D3D11_VIDEO_DECODER_DESC, Index: UINT, pConfig: ^D3D11_VIDEO_DECODER_CONFIG) : HRESULT;
    var GetContentProtectionCaps : proc(This: ^ID3D11VideoDevice, pCryptoType: ^GUID, pDecoderProfile: ^GUID, pCaps: ^D3D11_VIDEO_CONTENT_PROTECTION_CAPS) : HRESULT;
    var CheckCryptoKeyExchange : proc(This: ^ID3D11VideoDevice, pCryptoType: ^GUID, pDecoderProfile: ^GUID, Index: UINT, pKeyExchangeType: ^GUID) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11VideoDevice, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11VideoDevice, guid: REFGUID, pData: ^IUnknown) : HRESULT;
}
struct ID3D11Device {
    using var vtbl: ^ID3D11DeviceVtbl;
}
struct ID3D11DeviceVtbl {
    var QueryInterface : proc(This: ^ID3D11Device, riid: REFIID, ppvObject: ^rawptr) : HRESULT;
    var AddRef : proc(This: ^ID3D11Device) : ULONG;
    var Release : proc(This: ^ID3D11Device) : ULONG;
    var CreateBuffer : proc(This: ^ID3D11Device, pDesc: ^D3D11_BUFFER_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppBuffer: ^^ID3D11Buffer) : HRESULT;
    var CreateTexture1D : proc(This: ^ID3D11Device, pDesc: ^D3D11_TEXTURE1D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture1D: ^^ID3D11Texture1D) : HRESULT;
    var CreateTexture2D : proc(This: ^ID3D11Device, pDesc: ^D3D11_TEXTURE2D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture2D: ^^ID3D11Texture2D) : HRESULT;
    var CreateTexture3D : proc(This: ^ID3D11Device, pDesc: ^D3D11_TEXTURE3D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture3D: ^^ID3D11Texture3D) : HRESULT;
    var CreateShaderResourceView : proc(This: ^ID3D11Device, pResource: ^ID3D11Resource, pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: ^^ID3D11ShaderResourceView) : HRESULT;
    var CreateUnorderedAccessView : proc(This: ^ID3D11Device, pResource: ^ID3D11Resource, pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: ^^ID3D11UnorderedAccessView) : HRESULT;
    var CreateRenderTargetView : proc(This: ^ID3D11Device, pResource: ^ID3D11Resource, pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: ^^ID3D11RenderTargetView) : HRESULT;
    var CreateDepthStencilView : proc(This: ^ID3D11Device, pResource: ^ID3D11Resource, pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: ^^ID3D11DepthStencilView) : HRESULT;
    var CreateInputLayout : proc(This: ^ID3D11Device, pInputElementDescs: ^D3D11_INPUT_ELEMENT_DESC, NumElements: UINT, pShaderBytecodeWithInputSignature: rawptr, BytecodeLength: SIZE_T, ppInputLayout: ^^ID3D11InputLayout) : HRESULT;
    var CreateVertexShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppVertexShader: ^^ID3D11VertexShader) : HRESULT;
    var CreateGeometryShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) : HRESULT;
    var CreateGeometryShaderWithStreamOutput : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pSODeclaration: ^D3D11_SO_DECLARATION_ENTRY, NumEntries: UINT, pBufferStrides: ^UINT, NumStrides: UINT, RasterizedStream: UINT, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) : HRESULT;
    var CreatePixelShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppPixelShader: ^^ID3D11PixelShader) : HRESULT;
    var CreateHullShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppHullShader: ^^ID3D11HullShader) : HRESULT;
    var CreateDomainShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppDomainShader: ^^ID3D11DomainShader) : HRESULT;
    var CreateComputeShader : proc(This: ^ID3D11Device, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppComputeShader: ^^ID3D11ComputeShader) : HRESULT;
    var CreateClassLinkage : proc(This: ^ID3D11Device, ppLinkage: ^^ID3D11ClassLinkage) : HRESULT;
    var CreateBlendState : proc(This: ^ID3D11Device, pBlendStateDesc: ^D3D11_BLEND_DESC, ppBlendState: ^^ID3D11BlendState) : HRESULT;
    var CreateDepthStencilState : proc(This: ^ID3D11Device, pDepthStencilDesc: ^D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: ^^ID3D11DepthStencilState) : HRESULT;
    var CreateRasterizerState : proc(This: ^ID3D11Device, pRasterizerDesc: ^D3D11_RASTERIZER_DESC, ppRasterizerState: ^^ID3D11RasterizerState) : HRESULT;
    var CreateSamplerState : proc(This: ^ID3D11Device, pSamplerDesc: ^D3D11_SAMPLER_DESC, ppSamplerState: ^^ID3D11SamplerState) : HRESULT;
    var CreateQuery : proc(This: ^ID3D11Device, pQueryDesc: ^D3D11_QUERY_DESC, ppQuery: ^^ID3D11Query) : HRESULT;
    var CreatePredicate : proc(This: ^ID3D11Device, pPredicateDesc: ^D3D11_QUERY_DESC, ppPredicate: ^^ID3D11Predicate) : HRESULT;
    var CreateCounter : proc(This: ^ID3D11Device, pCounterDesc: ^D3D11_COUNTER_DESC, ppCounter: ^^ID3D11Counter) : HRESULT;
    var CreateDeferredContext : proc(This: ^ID3D11Device, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext) : HRESULT;
    var OpenSharedResource : proc(This: ^ID3D11Device, hResource: HANDLE, ReturnedInterface: REFIID, ppResource: ^rawptr) : HRESULT;
    var CheckFormatSupport : proc(This: ^ID3D11Device, Format: DXGI_FORMAT, pFormatSupport: ^UINT) : HRESULT;
    var CheckMultisampleQualityLevels : proc(This: ^ID3D11Device, Format: DXGI_FORMAT, SampleCount: UINT, pNumQualityLevels: ^UINT) : HRESULT;
    var CheckCounterInfo : proc(This: ^ID3D11Device, pCounterInfo: ^D3D11_COUNTER_INFO);
    var CheckCounter : proc(This: ^ID3D11Device, pDesc: ^D3D11_COUNTER_DESC, pType: ^UINT, pActiveCounters: ^UINT, szName: LPSTR, pNameLength: ^UINT, szUnits: LPSTR, pUnitsLength: ^UINT, szDescription: LPSTR, pDescriptionLength: ^UINT) : HRESULT;
    var CheckFeatureSupport : proc(This: ^ID3D11Device, Feature: UINT, pFeatureSupportData: rawptr, FeatureSupportDataSize: UINT) : HRESULT;
    var GetPrivateData : proc(This: ^ID3D11Device, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) : HRESULT;
    var SetPrivateData : proc(This: ^ID3D11Device, guid: REFGUID, DataSize: UINT, pData: rawptr) : HRESULT;
    var SetPrivateDataInterface : proc(This: ^ID3D11Device, guid: REFGUID, pData: ^IUnknown) : HRESULT;
    var GetFeatureLevel : proc(This: ^ID3D11Device) : D3D_FEATURE_LEVEL;
    var GetCreationFlags : proc(This: ^ID3D11Device) : UINT;
    var GetDeviceRemovedReason : proc(This: ^ID3D11Device) : HRESULT;
    var GetImmediateContext : proc(This: ^ID3D11Device, ppImmediateContext: ^^ID3D11DeviceContext);
    var SetExceptionMode : proc(This: ^ID3D11Device, RaiseFlags: UINT) : HRESULT;
    var GetExceptionMode : proc(This: ^ID3D11Device) : UINT;
}
//D3D11_INPUT_CLASSIFICATION
const D3D11_INPUT_PER_VERTEX_DATA                                             =  0;
const D3D11_INPUT_PER_INSTANCE_DATA                                           =  1;
//D3D11_FILL_MODE
const D3D11_FILL_WIREFRAME                                                    =  2;
const D3D11_FILL_SOLID                                                        =  3;
//D3D11_CULL_MODE
const D3D11_CULL_NONE                                                         =  1;
const D3D11_CULL_FRONT                                                        =  2;
const D3D11_CULL_BACK                                                         =  3;
//D3D11_RESOURCE_DIMENSION
const D3D11_RESOURCE_DIMENSION_UNKNOWN                                        =  0;
const D3D11_RESOURCE_DIMENSION_BUFFER                                         =  1;
const D3D11_RESOURCE_DIMENSION_TEXTURE1D                                      =  2;
const D3D11_RESOURCE_DIMENSION_TEXTURE2D                                      =  3;
const D3D11_RESOURCE_DIMENSION_TEXTURE3D                                      =  4;
//D3D11_DSV_DIMENSION
const D3D11_DSV_DIMENSION_UNKNOWN                                             =  0;
const D3D11_DSV_DIMENSION_TEXTURE1D                                           =  1;
const D3D11_DSV_DIMENSION_TEXTURE1DARRAY                                      =  2;
const D3D11_DSV_DIMENSION_TEXTURE2D                                           =  3;
const D3D11_DSV_DIMENSION_TEXTURE2DARRAY                                      =  4;
const D3D11_DSV_DIMENSION_TEXTURE2DMS                                         =  5;
const D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY                                    =  6;
//D3D11_RTV_DIMENSION
const D3D11_RTV_DIMENSION_UNKNOWN                                             =  0;
const D3D11_RTV_DIMENSION_BUFFER                                              =  1;
const D3D11_RTV_DIMENSION_TEXTURE1D                                           =  2;
const D3D11_RTV_DIMENSION_TEXTURE1DARRAY                                      =  3;
const D3D11_RTV_DIMENSION_TEXTURE2D                                           =  4;
const D3D11_RTV_DIMENSION_TEXTURE2DARRAY                                      =  5;
const D3D11_RTV_DIMENSION_TEXTURE2DMS                                         =  6;
const D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY                                    =  7;
const D3D11_RTV_DIMENSION_TEXTURE3D                                           =  8;
//D3D11_UAV_DIMENSION
const D3D11_UAV_DIMENSION_UNKNOWN                                             =  0;
const D3D11_UAV_DIMENSION_BUFFER                                              =  1;
const D3D11_UAV_DIMENSION_TEXTURE1D                                           =  2;
const D3D11_UAV_DIMENSION_TEXTURE1DARRAY                                      =  3;
const D3D11_UAV_DIMENSION_TEXTURE2D                                           =  4;
const D3D11_UAV_DIMENSION_TEXTURE2DARRAY                                      =  5;
const D3D11_UAV_DIMENSION_TEXTURE3D                                           =  8;
//D3D11_USAGE
const D3D11_USAGE_DEFAULT                                                     =  0;
const D3D11_USAGE_IMMUTABLE                                                   =  1;
const D3D11_USAGE_DYNAMIC                                                     =  2;
const D3D11_USAGE_STAGING                                                     =  3;
//D3D11_BIND_FLAG
const D3D11_BIND_VERTEX_BUFFER                                                =  0x1;
const D3D11_BIND_INDEX_BUFFER                                                 =  0x2;
const D3D11_BIND_CONSTANT_BUFFER                                              =  0x4;
const D3D11_BIND_SHADER_RESOURCE                                              =  0x8;
const D3D11_BIND_STREAM_OUTPUT                                                =  0x10;
const D3D11_BIND_RENDER_TARGET                                                =  0x20;
const D3D11_BIND_DEPTH_STENCIL                                                =  0x40;
const D3D11_BIND_UNORDERED_ACCESS                                             =  0x80;
const D3D11_BIND_DECODER                                                      =  0x200;
const D3D11_BIND_VIDEO_ENCODER                                                =  0x400;
//D3D11_CPU_ACCESS_FLAG
const D3D11_CPU_ACCESS_WRITE                                                  =  0x10000;
const D3D11_CPU_ACCESS_READ                                                   =  0x20000;
//D3D11_RESOURCE_MISC_FLAG
const D3D11_RESOURCE_MISC_GENERATE_MIPS                                       =  0x1;
const D3D11_RESOURCE_MISC_SHARED                                              =  0x2;
const D3D11_RESOURCE_MISC_TEXTURECUBE                                         =  0x4;
const D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS                                   =  0x10;
const D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS                              =  0x20;
const D3D11_RESOURCE_MISC_BUFFER_STRUCTURED                                   =  0x40;
const D3D11_RESOURCE_MISC_RESOURCE_CLAMP                                      =  0x80;
const D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX                                   =  0x100;
const D3D11_RESOURCE_MISC_GDI_COMPATIBLE                                      =  0x200;
const D3D11_RESOURCE_MISC_SHARED_NTHANDLE                                     =  0x800;
const D3D11_RESOURCE_MISC_RESTRICTED_CONTENT                                  =  0x1000;
const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE                            =  0x2000;
const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER                     =  0x4000;
const D3D11_RESOURCE_MISC_GUARDED                                             =  0x8000;
const D3D11_RESOURCE_MISC_TILE_POOL                                           =  0x20000;
const D3D11_RESOURCE_MISC_TILED                                               =  0x40000;
const D3D11_RESOURCE_MISC_HW_PROTECTED                                        =  0x80000;
//D3D11_MAP
const D3D11_MAP_READ                                                          =  1;
const D3D11_MAP_WRITE                                                         =  2;
const D3D11_MAP_READ_WRITE                                                    =  3;
const D3D11_MAP_WRITE_DISCARD                                                 =  4;
const D3D11_MAP_WRITE_NO_OVERWRITE                                            =  5;
//D3D11_MAP_FLAG
const D3D11_MAP_FLAG_DO_NOT_WAIT                                              =  0x100000;
//D3D11_RAISE_FLAG
const D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR                                  =  0x1;
//D3D11_CLEAR_FLAG
const D3D11_CLEAR_DEPTH                                                       =  0x1;
const D3D11_CLEAR_STENCIL                                                     =  0x2;
//D3D11_COMPARISON_FUNC
const D3D11_COMPARISON_NEVER                                                  =  1;
const D3D11_COMPARISON_LESS                                                   =  2;
const D3D11_COMPARISON_EQUAL                                                  =  3;
const D3D11_COMPARISON_LESS_EQUAL                                             =  4;
const D3D11_COMPARISON_GREATER                                                =  5;
const D3D11_COMPARISON_NOT_EQUAL                                              =  6;
const D3D11_COMPARISON_GREATER_EQUAL                                          =  7;
const D3D11_COMPARISON_ALWAYS                                                 =  8;
//D3D11_DEPTH_WRITE_MASK
const D3D11_DEPTH_WRITE_MASK_ZERO                                             =  0;
const D3D11_DEPTH_WRITE_MASK_ALL                                              =  1;
//D3D11_STENCIL_OP
const D3D11_STENCIL_OP_KEEP                                                   =  1;
const D3D11_STENCIL_OP_ZERO                                                   =  2;
const D3D11_STENCIL_OP_REPLACE                                                =  3;
const D3D11_STENCIL_OP_INCR_SAT                                               =  4;
const D3D11_STENCIL_OP_DECR_SAT                                               =  5;
const D3D11_STENCIL_OP_INVERT                                                 =  6;
const D3D11_STENCIL_OP_INCR                                                   =  7;
const D3D11_STENCIL_OP_DECR                                                   =  8;
//D3D11_BLEND
const D3D11_BLEND_ZERO                                                        =  1;
const D3D11_BLEND_ONE                                                         =  2;
const D3D11_BLEND_SRC_COLOR                                                   =  3;
const D3D11_BLEND_INV_SRC_COLOR                                               =  4;
const D3D11_BLEND_SRC_ALPHA                                                   =  5;
const D3D11_BLEND_INV_SRC_ALPHA                                               =  6;
const D3D11_BLEND_DEST_ALPHA                                                  =  7;
const D3D11_BLEND_INV_DEST_ALPHA                                              =  8;
const D3D11_BLEND_DEST_COLOR                                                  =  9;
const D3D11_BLEND_INV_DEST_COLOR                                              =  10;
const D3D11_BLEND_SRC_ALPHA_SAT                                               =  11;
const D3D11_BLEND_BLEND_FACTOR                                                =  14;
const D3D11_BLEND_INV_BLEND_FACTOR                                            =  15;
const D3D11_BLEND_SRC1_COLOR                                                  =  16;
const D3D11_BLEND_INV_SRC1_COLOR                                              =  17;
const D3D11_BLEND_SRC1_ALPHA                                                  =  18;
const D3D11_BLEND_INV_SRC1_ALPHA                                              =  19;
//D3D11_BLEND_OP
const D3D11_BLEND_OP_ADD                                                      =  1;
const D3D11_BLEND_OP_SUBTRACT                                                 =  2;
const D3D11_BLEND_OP_REV_SUBTRACT                                             =  3;
const D3D11_BLEND_OP_MIN                                                      =  4;
const D3D11_BLEND_OP_MAX                                                      =  5;
//D3D11_COLOR_WRITE_ENABLE
const D3D11_COLOR_WRITE_ENABLE_RED                                            =  1;
const D3D11_COLOR_WRITE_ENABLE_GREEN                                          =  2;
const D3D11_COLOR_WRITE_ENABLE_BLUE                                           =  4;
const D3D11_COLOR_WRITE_ENABLE_ALPHA                                          =  8;
const D3D11_COLOR_WRITE_ENABLE_ALL                                            =  ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN )  | D3D11_COLOR_WRITE_ENABLE_BLUE )  | D3D11_COLOR_WRITE_ENABLE_ALPHA );
//D3D11_TEXTURECUBE_FACE
const D3D11_TEXTURECUBE_FACE_POSITIVE_X                                       =  0;
const D3D11_TEXTURECUBE_FACE_NEGATIVE_X                                       =  1;
const D3D11_TEXTURECUBE_FACE_POSITIVE_Y                                       =  2;
const D3D11_TEXTURECUBE_FACE_NEGATIVE_Y                                       =  3;
const D3D11_TEXTURECUBE_FACE_POSITIVE_Z                                       =  4;
const D3D11_TEXTURECUBE_FACE_NEGATIVE_Z                                       =  5;
//D3D11_BUFFEREX_SRV_FLAG
const D3D11_BUFFEREX_SRV_FLAG_RAW                                             =  0x1;
//D3D11_DSV_FLAG
const D3D11_DSV_READ_ONLY_DEPTH                                               =  0x1;
const D3D11_DSV_READ_ONLY_STENCIL                                             =  0x2;
//D3D11_BUFFER_UAV_FLAG
const D3D11_BUFFER_UAV_FLAG_RAW                                               =  0x1;
const D3D11_BUFFER_UAV_FLAG_APPEND                                            =  0x2;
const D3D11_BUFFER_UAV_FLAG_COUNTER                                           =  0x4;
//D3D11_FILTER
const D3D11_FILTER_MIN_MAG_MIP_POINT                                          =  0;
const D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR                                   =  0x1;
const D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT                             =  0x4;
const D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR                                   =  0x5;
const D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT                                   =  0x10;
const D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR                            =  0x11;
const D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT                                   =  0x14;
const D3D11_FILTER_MIN_MAG_MIP_LINEAR                                         =  0x15;
const D3D11_FILTER_ANISOTROPIC                                                =  0x55;
const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT                               =  0x80;
const D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR                        =  0x81;
const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT                  =  0x84;
const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR                        =  0x85;
const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT                        =  0x90;
const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR                 =  0x91;
const D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT                        =  0x94;
const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR                              =  0x95;
const D3D11_FILTER_COMPARISON_ANISOTROPIC                                     =  0xd5;
const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT                                  =  0x100;
const D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR                           =  0x101;
const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT                     =  0x104;
const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR                           =  0x105;
const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT                           =  0x110;
const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR                    =  0x111;
const D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT                           =  0x114;
const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                                 =  0x115;
const D3D11_FILTER_MINIMUM_ANISOTROPIC                                        =  0x155;
const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                                  =  0x180;
const D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR                           =  0x181;
const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT                     =  0x184;
const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR                           =  0x185;
const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT                           =  0x190;
const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR                    =  0x191;
const D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT                           =  0x194;
const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                                 =  0x195;
const D3D11_FILTER_MAXIMUM_ANISOTROPIC                                        =  0x1d5;
//D3D11_FILTER_TYPE
const D3D11_FILTER_TYPE_POINT                                                 =  0;
const D3D11_FILTER_TYPE_LINEAR                                                =  1;
//D3D11_FILTER_REDUCTION_TYPE
const D3D11_FILTER_REDUCTION_TYPE_STANDARD                                    =  0;
const D3D11_FILTER_REDUCTION_TYPE_COMPARISON                                  =  1;
const D3D11_FILTER_REDUCTION_TYPE_MINIMUM                                     =  2;
const D3D11_FILTER_REDUCTION_TYPE_MAXIMUM                                     =  3;
//D3D11_TEXTURE_ADDRESS_MODE
const D3D11_TEXTURE_ADDRESS_WRAP                                              =  1;
const D3D11_TEXTURE_ADDRESS_MIRROR                                            =  2;
const D3D11_TEXTURE_ADDRESS_CLAMP                                             =  3;
const D3D11_TEXTURE_ADDRESS_BORDER                                            =  4;
const D3D11_TEXTURE_ADDRESS_MIRROR_ONCE                                       =  5;
//D3D11_FORMAT_SUPPORT
const D3D11_FORMAT_SUPPORT_BUFFER                                             =  0x1;
const D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER                                   =  0x2;
const D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER                                    =  0x4;
const D3D11_FORMAT_SUPPORT_SO_BUFFER                                          =  0x8;
const D3D11_FORMAT_SUPPORT_TEXTURE1D                                          =  0x10;
const D3D11_FORMAT_SUPPORT_TEXTURE2D                                          =  0x20;
const D3D11_FORMAT_SUPPORT_TEXTURE3D                                          =  0x40;
const D3D11_FORMAT_SUPPORT_TEXTURECUBE                                        =  0x80;
const D3D11_FORMAT_SUPPORT_SHADER_LOAD                                        =  0x100;
const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE                                      =  0x200;
const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON                           =  0x400;
const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT                            =  0x800;
const D3D11_FORMAT_SUPPORT_MIP                                                =  0x1000;
const D3D11_FORMAT_SUPPORT_MIP_AUTOGEN                                        =  0x2000;
const D3D11_FORMAT_SUPPORT_RENDER_TARGET                                      =  0x4000;
const D3D11_FORMAT_SUPPORT_BLENDABLE                                          =  0x8000;
const D3D11_FORMAT_SUPPORT_DEPTH_STENCIL                                      =  0x10000;
const D3D11_FORMAT_SUPPORT_CPU_LOCKABLE                                       =  0x20000;
const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE                                =  0x40000;
const D3D11_FORMAT_SUPPORT_DISPLAY                                            =  0x80000;
const D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT                             =  0x100000;
const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET                           =  0x200000;
const D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD                                   =  0x400000;
const D3D11_FORMAT_SUPPORT_SHADER_GATHER                                      =  0x800000;
const D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST                                   =  0x1000000;
const D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW                        =  0x2000000;
const D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON                           =  0x4000000;
const D3D11_FORMAT_SUPPORT_DECODER_OUTPUT                                     =  0x8000000;
const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT                             =  0x10000000;
const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT                              =  0x20000000;
const D3D11_FORMAT_SUPPORT_VIDEO_ENCODER                                      =  0x40000000;
//D3D11_FORMAT_SUPPORT2
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                                    =  0x1;
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                            =  0x2;
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE      =  0x4;
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                               =  0x8;
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                      =  0x10;
const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX                    =  0x20;
const D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD                                    =  0x40;
const D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE                                   =  0x80;
const D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                            =  0x100;
const D3D11_FORMAT_SUPPORT2_TILED                                             =  0x200;
const D3D11_FORMAT_SUPPORT2_SHAREABLE                                         =  0x400;
const D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                                =  0x4000;
//D3D11_ASYNC_GETDATA_FLAG
const D3D11_ASYNC_GETDATA_DONOTFLUSH                                          =  0x1;
//D3D11_QUERY
const D3D11_QUERY_EVENT                                                       =  0;
const D3D11_QUERY_OCCLUSION                                                   =  ( D3D11_QUERY_EVENT + 1 ) ;
const D3D11_QUERY_TIMESTAMP                                                   =  ( D3D11_QUERY_OCCLUSION + 1 ) ;
const D3D11_QUERY_TIMESTAMP_DISJOINT                                          =  ( D3D11_QUERY_TIMESTAMP + 1 ) ;
const D3D11_QUERY_PIPELINE_STATISTICS                                         =  ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ;
const D3D11_QUERY_OCCLUSION_PREDICATE                                         =  ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ;
const D3D11_QUERY_SO_STATISTICS                                               =  ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ;
const D3D11_QUERY_SO_OVERFLOW_PREDICATE                                       =  ( D3D11_QUERY_SO_STATISTICS + 1 ) ;
const D3D11_QUERY_SO_STATISTICS_STREAM0                                       =  ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ;
const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0                               =  ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ;
const D3D11_QUERY_SO_STATISTICS_STREAM1                                       =  ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ;
const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1                               =  ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ;
const D3D11_QUERY_SO_STATISTICS_STREAM2                                       =  ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ;
const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2                               =  ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ;
const D3D11_QUERY_SO_STATISTICS_STREAM3                                       =  ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ;
const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3                               =  ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 );
//D3D11_QUERY_MISC_FLAG
const D3D11_QUERY_MISC_PREDICATEHINT                                          =  0x1;
//D3D11_COUNTER
const D3D11_COUNTER_DEVICE_DEPENDENT_0                                        =  0x40000000;
//D3D11_COUNTER_TYPE
const D3D11_COUNTER_TYPE_FLOAT32                                              =  0;
const D3D11_COUNTER_TYPE_UINT16                                               =  ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ;
const D3D11_COUNTER_TYPE_UINT32                                               =  ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ;
const D3D11_COUNTER_TYPE_UINT64                                               =  ( D3D11_COUNTER_TYPE_UINT32 + 1 );
//D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
const D3D11_STANDARD_MULTISAMPLE_PATTERN                                      =  0xffffffff;
const D3D11_CENTER_MULTISAMPLE_PATTERN                                        =  0xfffffffe;
//D3D11_DEVICE_CONTEXT_TYPE
const D3D11_DEVICE_CONTEXT_IMMEDIATE                                          =  0;
const D3D11_DEVICE_CONTEXT_DEFERRED                                           =  ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 );
//D3D11_FEATURE
const D3D11_FEATURE_THREADING                                                 =  0;
const D3D11_FEATURE_DOUBLES                                                   =  ( D3D11_FEATURE_THREADING + 1 ) ;
const D3D11_FEATURE_FORMAT_SUPPORT                                            =  ( D3D11_FEATURE_DOUBLES + 1 ) ;
const D3D11_FEATURE_FORMAT_SUPPORT2                                           =  ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ;
const D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS                                  =  ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS                                             =  ( D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS + 1 ) ;
const D3D11_FEATURE_ARCHITECTURE_INFO                                         =  ( D3D11_FEATURE_D3D11_OPTIONS + 1 ) ;
const D3D11_FEATURE_D3D9_OPTIONS                                              =  ( D3D11_FEATURE_ARCHITECTURE_INFO + 1 ) ;
const D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT                              =  ( D3D11_FEATURE_D3D9_OPTIONS + 1 ) ;
const D3D11_FEATURE_D3D9_SHADOW_SUPPORT                                       =  ( D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS1                                            =  ( D3D11_FEATURE_D3D9_SHADOW_SUPPORT + 1 ) ;
const D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT                            =  ( D3D11_FEATURE_D3D11_OPTIONS1 + 1 ) ;
const D3D11_FEATURE_MARKER_SUPPORT                                            =  ( D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ) ;
const D3D11_FEATURE_D3D9_OPTIONS1                                             =  ( D3D11_FEATURE_MARKER_SUPPORT + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS2                                            =  ( D3D11_FEATURE_D3D9_OPTIONS1 + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS3                                            =  ( D3D11_FEATURE_D3D11_OPTIONS2 + 1 ) ;
const D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT                               =  ( D3D11_FEATURE_D3D11_OPTIONS3 + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS4                                            =  ( D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT + 1 ) ;
const D3D11_FEATURE_SHADER_CACHE                                              =  ( D3D11_FEATURE_D3D11_OPTIONS4 + 1 ) ;
const D3D11_FEATURE_D3D11_OPTIONS5                                            =  ( D3D11_FEATURE_SHADER_CACHE + 1 );
//D3D11_SHADER_MIN_PRECISION_SUPPORT
const D3D11_SHADER_MIN_PRECISION_10_BIT                                       =  0x1;
const D3D11_SHADER_MIN_PRECISION_16_BIT                                       =  0x2;
//D3D11_TILED_RESOURCES_TIER
const D3D11_TILED_RESOURCES_NOT_SUPPORTED                                     =  0;
const D3D11_TILED_RESOURCES_TIER_1                                            =  1;
const D3D11_TILED_RESOURCES_TIER_2                                            =  2;
const D3D11_TILED_RESOURCES_TIER_3                                            =  3;
//D3D11_CONSERVATIVE_RASTERIZATION_TIER
const D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED                          =  0;
const D3D11_CONSERVATIVE_RASTERIZATION_TIER_1                                 =  1;
const D3D11_CONSERVATIVE_RASTERIZATION_TIER_2                                 =  2;
const D3D11_CONSERVATIVE_RASTERIZATION_TIER_3                                 =  3;
//D3D11_SHADER_CACHE_SUPPORT_FLAGS
const D3D11_SHADER_CACHE_SUPPORT_NONE                                         =  0;
const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE                       =  0x1;
const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE                         =  0x2;
//D3D11_SHARED_RESOURCE_TIER
const D3D11_SHARED_RESOURCE_TIER_0                                            =  0;
const D3D11_SHARED_RESOURCE_TIER_1                                            =  ( D3D11_SHARED_RESOURCE_TIER_0 + 1 ) ;
const D3D11_SHARED_RESOURCE_TIER_2                                            =  ( D3D11_SHARED_RESOURCE_TIER_1 + 1 );
//D3D11_VIDEO_DECODER_BUFFER_TYPE
const D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS                           =  0;
const D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL                           =  1;
const D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE                          =  2;
const D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL                           =  3;
const D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX                  =  4;
const D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL                                =  5;
const D3D11_VIDEO_DECODER_BUFFER_BITSTREAM                                    =  6;
const D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR                                =  7;
const D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN                                   =  8;
//D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT                              =  0x1;
const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT                             =  0x2;
//D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE                          =  0x1;
const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC                                 =  0x2;
const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION                  =  0x4;
const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION               =  0x8;
const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE                         =  0x10;
//D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL                           =  0x1;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION                         =  0x2;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY                             =  0x4;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE                        =  0x8;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY                               =  0x10;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO                               =  0x20;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION                             =  0x40;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM                         =  0x80;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO                   =  0x100;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR                               =  0x200;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE                         =  0x400;
const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10                       =  0x800;
//D3D11_VIDEO_PROCESSOR_FILTER_CAPS
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS                            =  0x1;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST                              =  0x2;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE                                   =  0x4;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION                            =  0x8;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION                       =  0x10;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT                      =  0x20;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING                    =  0x40;
const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT                     =  0x80;
//D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED                        =  0x1;
const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP                           =  0x2;
const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY                          =  0x4;
const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED                    =  0x8;
//D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE                          =  0x1;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING                        =  0x2;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT                 =  0x4;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION                 =  0x8;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING               =  0x10;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION              =  0x20;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION                 =  0x40;
const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING               =  0x80;
//D3D11_VIDEO_PROCESSOR_STEREO_CAPS
const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET                           =  0x1;
const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED                       =  0x2;
const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED                    =  0x4;
const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD                          =  0x8;
const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE                             =  0x10;
//D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND                  =  0x1;
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB                    =  0x2;
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE               =  0x4;
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION    =  0x8;
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE                   =  0x10;
const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION              =  0x20;
//D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32                                 =  0x1;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22                                 =  0x2;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224                               =  0x4;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332                               =  0x8;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322                              =  0x10;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55                                 =  0x20;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64                                 =  0x40;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87                                 =  0x80;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223                       =  0x100;
const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER                              =  0x80000000;
//D3D11_CONTENT_PROTECTION_CAPS
const D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE                                  =  0x1;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE                                  =  0x2;
const D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON                      =  0x4;
const D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION                        =  0x8;
const D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY                               =  0x10;
const D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY                       =  0x20;
const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK                       =  0x40;
const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY                   =  0x80;
const D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV                         =  0x100;
const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY                    =  0x200;
const D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT                            =  0x400;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED             =  0x800;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE        =  0x1000;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN                         =  0x2000;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION                =  0x4000;
const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED =  0x8000;
//D3D11_VIDEO_PROCESSOR_FILTER
const D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS                                 =  0;
const D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST                                   =  1;
const D3D11_VIDEO_PROCESSOR_FILTER_HUE                                        =  2;
const D3D11_VIDEO_PROCESSOR_FILTER_SATURATION                                 =  3;
const D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION                            =  4;
const D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT                           =  5;
const D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING                         =  6;
const D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT                          =  7;
//D3D11_VIDEO_FRAME_FORMAT
const D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE                                    =  0;
const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST                     =  1;
const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST                  =  2;
//D3D11_VIDEO_USAGE
const D3D11_VIDEO_USAGE_PLAYBACK_NORMAL                                       =  0;
const D3D11_VIDEO_USAGE_OPTIMAL_SPEED                                         =  1;
const D3D11_VIDEO_USAGE_OPTIMAL_QUALITY                                       =  2;
//D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED                           =  0;
const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235                              =  1;
const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255                               =  2;
//D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE                            =  0;
const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND                        =  1;
const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION                       =  2;
const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM                     =  3;
//D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL                                =  0;
const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF                                  =  1;
const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM                                =  2;
//D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO                                =  0;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL                          =  1;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL                            =  2;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE                            =  3;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET                         =  4;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED                     =  5;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED                  =  6;
const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD                        =  7;
//D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE                                  =  0;
const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0                                =  1;
const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1                                =  2;
//D3D11_VIDEO_PROCESSOR_ROTATION
const D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY                                 =  0;
const D3D11_VIDEO_PROCESSOR_ROTATION_90                                       =  1;
const D3D11_VIDEO_PROCESSOR_ROTATION_180                                      =  2;
const D3D11_VIDEO_PROCESSOR_ROTATION_270                                      =  3;
//D3D11_AUTHENTICATED_CHANNEL_TYPE
const D3D11_AUTHENTICATED_CHANNEL_D3D11                                       =  1;
const D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE                             =  2;
const D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE                             =  3;
//D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
const D3D11_PROCESSIDTYPE_UNKNOWN                                             =  0;
const D3D11_PROCESSIDTYPE_DWM                                                 =  1;
const D3D11_PROCESSIDTYPE_HANDLE                                              =  2;
//D3D11_BUS_TYPE
const D3D11_BUS_TYPE_OTHER                                                    =  0;
const D3D11_BUS_TYPE_PCI                                                      =  0x1;
const D3D11_BUS_TYPE_PCIX                                                     =  0x2;
const D3D11_BUS_TYPE_PCIEXPRESS                                               =  0x3;
const D3D11_BUS_TYPE_AGP                                                      =  0x4;
const D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET                               =  0x10000;
const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP                  =  0x20000;
const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET                =  0x30000;
const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR                        =  0x40000;
const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE         =  0x50000;
const D3D11_BUS_IMPL_MODIFIER_NON_STANDARD                                    =  0x80000000;
//D3D11_VDOV_DIMENSION
const D3D11_VDOV_DIMENSION_UNKNOWN                                            =  0;
const D3D11_VDOV_DIMENSION_TEXTURE2D                                          =  1;
//D3D11_VPIV_DIMENSION
const D3D11_VPIV_DIMENSION_UNKNOWN                                            =  0;
const D3D11_VPIV_DIMENSION_TEXTURE2D                                          =  1;
//D3D11_VPOV_DIMENSION
const D3D11_VPOV_DIMENSION_UNKNOWN                                            =  0;
const D3D11_VPOV_DIMENSION_TEXTURE2D                                          =  1;
const D3D11_VPOV_DIMENSION_TEXTURE2DARRAY                                     =  2;
//D3D11_CREATE_DEVICE_FLAG
const D3D11_CREATE_DEVICE_SINGLETHREADED                                      =  0x1;
const D3D11_CREATE_DEVICE_DEBUG                                               =  0x2;
const D3D11_CREATE_DEVICE_SWITCH_TO_REF                                       =  0x4;
const D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS            =  0x8;
const D3D11_CREATE_DEVICE_BGRA_SUPPORT                                        =  0x20;
const D3D11_CREATE_DEVICE_DEBUGGABLE                                          =  0x40;
const D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY       =  0x80;
const D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT                                 =  0x100;
const D3D11_CREATE_DEVICE_VIDEO_SUPPORT                                       =  0x800;
