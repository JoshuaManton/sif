proc buffer_allocate(buffer: []byte, offset: ^int, size: int, alignment: int, panic_on_oom: bool) : rawptr {
    // Don't allow allocations of zero size. This would likely return a
    // pointer to a different allocation, causing many problems.
    if (size == 0) {
        return null;
    }

    // todo(josh): The `align_forward()` call and the `start + size` below
    // that could overflow if the `size` or `align` parameters are super huge
    var start = align_forward(offset^, alignment);

    // Don't allow allocations that would extend past the end of the buffer.
    if ((start + size) > buffer.count) {
        if (panic_on_oom) {
            assert(false);
        }
        return null;
    }

    offset^ = start + size;
    var ptr = &buffer[start];
    zero_memory(slice_ptr(ptr, size));
    return ptr;
}



struct Arena_Allocator {
    var memory: []byte;
    var cur_offset: int;
    var panic_on_oom: bool;
}

proc init_arena(arena: ^Arena_Allocator, backing: []byte, panic_on_oom: bool) {
    arena.memory = backing;
    arena.cur_offset = 0;
    arena.panic_on_oom = panic_on_oom;
}

proc arena_alloc(allocator: rawptr, size: int, align: int) : rawptr {
    var arena = cast(^Arena_Allocator, allocator);
    return buffer_allocate(arena.memory, &arena.cur_offset, size, align, arena.panic_on_oom);
}

proc arena_free(allocator: rawptr, ptr: rawptr) {
    // note(josh): freeing from arenas does nothing.
}

proc arena_clear(arena: ^Arena_Allocator) {
    arena.cur_offset = 0;
}

proc arena_to_allocator(arena: ^Arena_Allocator) : Allocator {
    var a: Allocator;
    a.data = arena;
    a.alloc_proc = arena_alloc;
    a.free_proc = arena_free;
    return a;
}