proc malloc      (size: int)                                    : rawptr #foreign; @sif_runtime
proc free        (ptr: rawptr)                                           #foreign; @sif_runtime
proc assert      (condition: bool)                                       #foreign; @sif_runtime
proc memcpy      (dst: rawptr, src: rawptr, size_in_bytes: u64) : rawptr #foreign; @sif_runtime
proc memmove     (dst: rawptr, src: rawptr, size_in_bytes: u64) : rawptr #foreign; @sif_runtime



proc zero_memory(memory: []byte) {
    // todo(josh): we can do smarter things here but this is fine for now
    for (var i = 0; i < memory.count; i += 1) {
        memory[i] = 0;
    }
} @sif_runtime

proc zero_pointer(ptr: rawptr, size_in_bytes: int) {
    zero_memory(slice_ptr(cast(^byte, ptr), size_in_bytes));
} @sif_runtime



proc ptr_offset(ptr: ^$T, offset_in_bytes: int) : ^T {
    var ptr_int = transmute(u64, ptr);
    ptr_int += cast(u64, offset_in_bytes);
    return transmute(^T, ptr_int);
} @sif_runtime



proc slice_ptr(ptr: ^$T, count: int) : []T {
    var slice: []T;
    slice.data = ptr;
    slice.count = count;
    return slice;
} @sif_runtime

proc string_ptr(ptr: ^u8, count: int) : string {
    var str: string;
    str.data = ptr;
    str.count = count;
    return str;
} @sif_runtime



struct Raw_Slice {
    var data: rawptr;
    var count: int;
} @sif_runtime

struct Raw_String {
    var data: rawptr;
    var count: int;
} @sif_runtime



struct Allocator {
    var data: rawptr;
    var alloc_proc: proc(allocator: rawptr, size: int, align: int) : rawptr;
    var free_proc:  proc(allocator: rawptr, ptr: rawptr);
} @sif_runtime

proc sif_alloc(size: int, align: int, allocator: Allocator) : rawptr {
    assert(allocator.alloc_proc != null);
    return allocator.alloc_proc(allocator.data, size, align);
} @sif_runtime

proc sif_free(ptr: rawptr, allocator: Allocator) {
    assert(allocator.free_proc != null);
    allocator.free_proc(allocator.data, ptr);
} @sif_runtime



proc default_allocator_alloc(allocator: rawptr, size: int, align: int) : rawptr {
    return malloc(size);
} @sif_runtime
proc default_allocator_free(allocator: rawptr, ptr: rawptr) {
    free(ptr);
} @sif_runtime
proc default_allocator() : Allocator {
    var a: Allocator;
    a.alloc_proc = default_allocator_alloc;
    a.free_proc = default_allocator_free;
    return a;
} @sif_runtime



proc string_eq(var a: string, var b: string) : bool {
    if (a.count != b.count) {
        return false;
    }
    for (var i = 0; i < a.count; i += 1) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
} @sif_runtime



var _global_type_table: []^Type_Info; @sif_runtime

proc get_type_info(type: typeid) : ^Type_Info {
    var idx = transmute(u64, type);
    return _global_type_table[cast(int, idx)];
} @sif_runtime

// note(josh): backend depends on this ordering! :TypeInfoKindValues
enum Type_Info_Kind {
    INTEGER   = 0;
    FLOAT     = 1;
    BOOL      = 2;
    STRING    = 3;
    STRUCT    = 4;
    UNION     = 5;
    ENUM      = 6;
    POINTER   = 7;
    SLICE     = 8;
    ARRAY     = 9;
    REFERENCE = 10;
    PROCEDURE = 11;
    TYPEID    = 12;
} @sif_runtime

struct Type_Info {
    var printable_name: string;
    var kind: Type_Info_Kind;
    var id: typeid;
    var size: int;
    var align: int;
} @sif_runtime

struct Type_Info_Integer {
    var base: Type_Info;
    var is_signed: bool;
} @sif_runtime

struct Type_Info_Float {
    var base: Type_Info;
} @sif_runtime

struct Type_Info_Bool {
    var base: Type_Info;
} @sif_runtime

struct Type_Info_String {
    var base: Type_Info;
} @sif_runtime

struct Type_Info_Struct_Field {
    var name: string;
    var type: ^Type_Info;
    var offset: int;
} @sif_runtime
struct Type_Info_Struct {
    var base: Type_Info;
    var name: string;
    var fields: []Type_Info_Struct_Field;
} @sif_runtime

struct Type_Info_Union {
    var base: Type_Info;
    var name: string;
    var fields: []Type_Info_Struct_Field;
} @sif_runtime

struct Type_Info_Enum_Field {
    var name: string;
    var value: int;
} @sif_runtime
struct Type_Info_Enum {
    var base: Type_Info;
    var base_type: ^Type_Info;
    var fields: []Type_Info_Enum_Field;
} @sif_runtime

struct Type_Info_Pointer {
    var base: Type_Info;
    var pointer_to: ^Type_Info;
} @sif_runtime

struct Type_Info_Slice {
    var base: Type_Info;
    var slice_of: ^Type_Info;
} @sif_runtime

struct Type_Info_Array {
    var base: Type_Info;
    var array_of: ^Type_Info;
    var count: int;
} @sif_runtime

struct Type_Info_Reference {
    var base: Type_Info;
    var reference_to: ^Type_Info;
} @sif_runtime

struct Type_Info_Procedure {
    var base: Type_Info;
    var parameter_types: []^Type_Info;
    var return_type: ^Type_Info;
} @sif_runtime

struct Type_Info_Typeid {
    var base: Type_Info;
} @sif_runtime