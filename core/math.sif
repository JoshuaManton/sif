const F32_MIN:     f32 = 1.175494351e-38;
const F32_MAX:     f32 = 3.402823466e+38;
// const F32_INFINITY: f32 = 0x7F800000;
// const F32_NAN:      f32 = 0x7FBFFFFF;

const F64_MIN:     f64 = 2.2250738585072014e-308;
const F64_MAX:     f64 = 1.7976931348623158e+308;
// const F64_INFINITY: f64 = 0x7FF0000000000000;
// const F64_NAN:      f64 = 0x7FF7FFFFFFFFFFFF;

const TAU         := 6.28318530717958647692528676655900576;
const PI          := 3.14159265358979323846264338327950288;
const E           := 2.71828182845904523536;
const RAD_PER_DEG := (TAU/360.0);
const DEG_PER_RAD := (360.0/TAU);

proc to_radians    (degrees: f32) : f32 { return degrees * RAD_PER_DEG; }
proc to_radians_f64(degrees: f64) : f64 { return degrees * RAD_PER_DEG; }
proc to_degrees    (radians: f32) : f32 { return radians * DEG_PER_RAD; }
proc to_degrees_f64(radians: f64) : f64 { return radians * DEG_PER_RAD; }

proc clamp(v: float, a: float, b: float) : float { return max(min(v, b), a); }
proc lerp(a: float, b: float, t: float) : float { return a + ((b - a) * t); }

proc next_power_of_2(n: int) : int {
    if (n <= 0) {
        return 0;
    }
    n -= 1;
    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    n |= n >> 32;
    n += 1;
    return n;
}



struct Vector2 {
    x: float;
    y: float;
    operator +(a: Vector2, b: Vector2) : Vector2 {
        return Vector2.{a.x + b.x, a.y + b.y};
    }
    operator -(a: Vector2, b: Vector2) : Vector2 {
        return Vector2.{a.x - b.x, a.y - b.y};
    }
    operator *(a: Vector2, b: Vector2) : Vector2 {
        return Vector2.{a.x * b.x, a.y * b.y};
    }
    operator /(a: Vector2, b: Vector2) : Vector2 {
        return Vector2.{a.x / b.x, a.y / b.y};
    }

    operator *(a: Vector2, f: float) : Vector2 {
        return Vector2.{a.x * f, a.y * f};
    }
    operator /(a: Vector2, f: float) : Vector2 {
        return Vector2.{a.x / f, a.y / f};
    }

    proc negate(a: Vector2) : Vector2 { // @UnaryOperatorOverloading
        result: Vector2;
        result.x = -a.x;
        result.y = -a.y;
        return result;
    }

    proc dot(a: Vector2, b: Vector2) : float {
        return (a.x*b.x) + (a.y*b.y);
    }
    proc length(v: Vector2) : float {
        return cast(float, sqrt(cast(f64, dot(v, v))));
    }
    proc sqr_length(v: Vector2) : float {
        return dot(v, v);
    }
    proc normalize(v: Vector2) : Vector2 {
        return v / length(v);
    }
    proc cross(a: Vector2, b: Vector2) : float {
        return a.x*b.y - b.x*a.y;
    }

    operator [](v: >Vector2, idx: int) : >float {
        return slice_ptr(&v.x, 2)[idx]; // @PointerArithmetic
    }
}

struct Vector3 {
    x: float;
    y: float;
    z: float;
    operator +(a: Vector3, b: Vector3) : Vector3 {
        return Vector3.{a.x + b.x, a.y + b.y, a.z + b.z};
    }
    operator -(a: Vector3, b: Vector3) : Vector3 {
        return Vector3.{a.x - b.x, a.y - b.y, a.z - b.z};
    }
    operator *(a: Vector3, b: Vector3) : Vector3 {
        return Vector3.{a.x * b.x, a.y * b.y, a.z * b.z};
    }
    operator /(a: Vector3, b: Vector3) : Vector3 {
        return Vector3.{a.x / b.x, a.y / b.y, a.z / b.z};
    }

    operator *(a: Vector3, f: float) : Vector3 {
        return Vector3.{a.x * f, a.y * f, a.z * f};
    }
    operator /(a: Vector3, f: float) : Vector3 {
        return Vector3.{a.x / f, a.y / f, a.z / f};
    }

    proc lerp(a: Vector3, b: Vector3, t: float) : Vector3 {
        return a + (b - a) * t;
    }

    proc negate(a: Vector3) : Vector3 { // @UnaryOperatorOverloading
        result: Vector3;
        result.x = -a.x;
        result.y = -a.y;
        result.z = -a.z;
        return result;
    }

    proc dot(a: Vector3, b: Vector3) : float {
        return (a.x*b.x) + (a.y*b.y) + (a.z*b.z);
    }
    proc length(v: Vector3) : float {
        return cast(float, sqrt(cast(f64, dot(v, v))));
    }
    proc sqr_length(v: Vector3) : float {
        return dot(v, v);
    }
    proc normalize(v: Vector3) : Vector3 {
        return v / length(v);
    }
    proc cross(a: Vector3, b: Vector3) : Vector3 {
        result: Vector3;
        result.x = a.y*b.z - b.y*a.z;
        result.y = a.z*b.x - b.z*a.x;
        result.z = a.x*b.y - b.x*a.y;
        return result;
    }

    proc arbitrary_perpendicular(a: Vector3) : Vector3 {
        assert(length(a) == 1);
        b := Vector3.{1, 0, 0};
        if (fabsf(dot(a, b)) == 1) {
            b = Vector3.{0, 1, 0};
        }
        d := cross(a, b);
        return d;
    }

    operator [](v: >Vector3, idx: int) : >float {
        return slice_ptr(&v.x, 3)[idx]; // @PointerArithmetic
    }
}

struct Vector4 {
    x: float;
    y: float;
    z: float;
    w: float;

    operator +(a: Vector4, b: Vector4) : Vector4 {
        return Vector4.{a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w};
    }
    operator -(a: Vector4, b: Vector4) : Vector4 {
        return Vector4.{a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w};
    }
    operator *(a: Vector4, b: Vector4) : Vector4 {
        return Vector4.{a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w};
    }
    operator /(a: Vector4, b: Vector4) : Vector4 {
        return Vector4.{a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w};
    }

    operator *(a: Vector4, f: float) : Vector4 {
        return Vector4.{a.x * f, a.y * f, a.z * f, a.w * f};
    }
    operator /(a: Vector4, f: float) : Vector4 {
        return Vector4.{a.x / f, a.y / f, a.z / f, a.w / f};
    }

    proc negate(a: Vector4) : Vector4 { // @UnaryOperatorOverloading
        result: Vector4;
        result.x = -a.x;
        result.y = -a.y;
        result.z = -a.z;
        result.w = -a.w;
        return result;
    }

    proc dot(a: Vector4, b: Vector4) : float {
        return (a.x*b.x) + (a.y*b.y) + (a.z*b.z) + (a.w*b.w);
    }
    proc length(v: Vector4) : float {
        return cast(float, sqrt(cast(f64, dot(v, v))));
    }
    proc sqr_length(v: Vector4) : float {
        return dot(v, v);
    }
    proc normalize(v: Vector4) : Vector4 {
        return v / length(v);
    }

    operator [](v: >Vector4, idx: int) : >float {
        return slice_ptr(&v.x, 4)[idx]; // @PointerArithmetic
    }
}



struct Quaternion {
    x: float;
    y: float;
    z: float;
    w: float;

    operator [](q: >Quaternion, idx: int) : >float {
        return slice_ptr(&q.x, 4)[idx]; // @PointerArithmetic
    }

    proc identity() : Quaternion {
        result: Quaternion;
        result.x = 0;
        result.y = 0;
        result.z = 0;
        result.w = 1;
        return result;
    }

    proc negate(a: Quaternion) : Quaternion { // @UnaryOperatorOverloading
        result: Quaternion;
        result.x = -a.x;
        result.y = -a.y;
        result.z = -a.z;
        result.w = -a.w;
        return result;
    }

    proc look_at(eye: Vector3, center: Vector3, up: Vector3) : Quaternion {
        // todo(josh): figure out why we have to swap center & eye, and why we need the inverse()
        m := Matrix4.look_at(center, eye, up);
        return normalize(inverse(matrix4_to_quaternion(m)));
    }

    operator +(a: Quaternion, b: Quaternion) : Quaternion {
        result: Quaternion;
        result.x = a.x+b.x;
        result.y = a.y+b.y;
        result.z = a.z+b.z;
        result.w = a.w+b.w;
        return result;
    }

    operator -(a: Quaternion, b: Quaternion) : Quaternion {
        result: Quaternion;
        result.x = a.x-b.x;
        result.y = a.y-b.y;
        result.z = a.z-b.z;
        result.w = a.w-b.w;
        return result;
    }

    operator *(a: Quaternion, b: Quaternion) : Quaternion {
        result: Quaternion;
        result.x = ( a.x*b.w) + (a.y*b.z) - (a.z*b.y) + (a.w*b.x);
        result.y = (-a.x*b.z) + (a.y*b.w) + (a.z*b.x) + (a.w*b.y);
        result.z = ( a.x*b.y) - (a.y*b.x) + (a.z*b.w) + (a.w*b.z);
        result.w = (-a.x*b.x) - (a.y*b.y) - (a.z*b.z) + (a.w*b.w);
        return result;
    }

    operator *(q: Quaternion, v: Vector3) : Vector3 {
        qxyz := Vector3.{q.x, q.y, q.z};
        t := Vector3.cross(qxyz * 2.0, v);
        return v + t*q.w + Vector3.cross(qxyz, t);
    }

    operator *(a: Quaternion, f: float) : Quaternion {
        result: Quaternion;
        result.x = a.x*f;
        result.y = a.y*f;
        result.z = a.z*f;
        result.w = a.w*f;
        return result;
    }

    operator /(a: Quaternion, f: float) : Quaternion {
        result: Quaternion;
        result.x = a.x/f;
        result.y = a.y/f;
        result.z = a.z/f;
        result.w = a.w/f;
        return result;
    }

    proc dot(a: Quaternion, b: Quaternion) : float {
        return (a.x*b.x) + (a.y*b.y) + (a.z*b.z) + (a.w*b.w);
    }

    proc length(q: Quaternion) : float {
        return cast(float, sqrt(cast(f64, dot(q, q))));
    }

    proc sqr_length(q: Quaternion) : float {
        return dot(q, q);
    }

    proc normalize(q: Quaternion) : Quaternion {
        return q / length(q);
    }

    proc inverse(q: Quaternion) : Quaternion {
        conjugate: Quaternion;
        conjugate.x = -q.x;
        conjugate.y = -q.y;
        conjugate.z = -q.z;
        conjugate.w = q.w;

        len_sqr := dot(q, q);
        result: Quaternion;
        result = conjugate / len_sqr;
        return result;
    }

    proc difference(a: Quaternion, b: Quaternion) : Quaternion {
        if (dot(a, b) < 0) {
            return normalize(inverse(a) * negate(b));
        }
        else {
            return normalize(inverse(a) * b);
        }
    }

    proc angle_between_quaternions(a: Quaternion, b: Quaternion) : float {
        rads := 2 * cast(float, acos(cast(f64, fabsf(dot(a, b)))));
        return rads;
    }

    proc right  (q: Quaternion) : Vector3 { return q * Vector3.{1, 0, 0}; }
    proc up     (q: Quaternion) : Vector3 { return q * Vector3.{0, 1, 0}; }
    proc forward(q: Quaternion) : Vector3 { return q * Vector3.{0, 0, 1}; }
    proc left   (q: Quaternion) : Vector3 { return Vector3.negate(right(q));   }
    proc down   (q: Quaternion) : Vector3 { return Vector3.negate(up(q));      }
    proc back   (q: Quaternion) : Vector3 { return Vector3.negate(forward(q)); }
};

proc axis_angle(axis: Vector3, angle_radians: float) : Quaternion {
    norm := Vector3.normalize(axis);
    s := cast(float, sin(cast(f64, angle_radians / 2.0)));

    vec := norm * s;

    result: Quaternion;
    result.x = vec.x;
    result.y = vec.y;
    result.z = vec.z;
    result.w = cast(float, cos(cast(f64, angle_radians / 2.0)));
    return result;
}

proc slerp(a: Quaternion, b: Quaternion, t: float) : Quaternion {
    cos_theta := Quaternion.dot(a, b);
    angle := cast(float, cos(cast(f64, cos_theta)));

    s1 := cast(float, sin(cast(f64, (1.0 - t) * angle)));
    s2 := cast(float, sin(cast(f64, t * angle)));
    is := 1.0 / cast(float, sin(cast(f64, angle)));

    left := a * s1;
    right := b * s2;

    result := left + right;
    result = result * is;
    return result;
}



struct Matrix3 {
    elements: [3][3]float;

    operator [](m: >Matrix3, idx: int) : >[3]float {
        return m.elements[idx];
    }

    proc identity() : Matrix3 {
        m: Matrix3;
        m.elements[0][0] = 1.0;
        m.elements[1][1] = 1.0;
        m.elements[2][2] = 1.0;
        return m;
    }

    operator *(a: Matrix3, b: Matrix3) : Matrix3 {
        result: Matrix3;
        for (column := 0; column < 3; column += 1) {
            for (row := 0; row < 3; row += 1) {
                sum: float = 0;
                for (v := 0; v < 3; v += 1) {
                    sum += a[v][row] * b[column][v];
                }
                result[column][row] = sum;
            }
        }
        return result;
    }

    operator *(a: Matrix3, v: Vector3) : Vector3 {
        result: Vector3;
        for (row := 0; row < 3; row += 1) {
            sum: float = 0;
            for (column := 0; column < 3; column += 1) {
                sum += a[column][row] * v[column];
            }
            result[row] = sum;
        }
        return result;
    }

    operator *(a: Matrix3, f: float) : Matrix3 {
        result: Matrix3;
        for (column := 0; column < 3; column += 1) {
            for (row := 0; row < 3; row += 1) {
                result[column][row] = a[column][row] * f;
            }
        }
        return result;
    }

    proc determinant(m: Matrix3) : float {
        a := +m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2]);
        b := -m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2]);
        c := +m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]);
        return a + b + c;
    }
}



struct Matrix4 {
    elements: [4][4]float;

    operator [](m: >Matrix4, idx: int) : >[4]float {
        return m.elements[idx];
    }

    proc identity() : Matrix4 {
        m: Matrix4;
        m.elements[0][0] = 1.0;
        m.elements[1][1] = 1.0;
        m.elements[2][2] = 1.0;
        m.elements[3][3] = 1.0;
        return m;
    }

    proc transpose(a: Matrix4) : Matrix4 {
        result: Matrix4;
        for (j := 0; j < 4; j += 1) {
            for (i := 0; i < 4; i += 1) {
                result[j][i] = a[i][j];
            }
        }
        return result;
    }

    proc look_at(eye: Vector3, center: Vector3, up: Vector3) : Matrix4 {
        f := Vector3.normalize(center - eye);
        s := Vector3.normalize(Vector3.cross(f, up));
        u := Vector3.cross(s, f);

        fe := Vector3.dot(f, eye);

        columns := [4]Vector4.{
            Vector4.{+s.x, +u.x, -f.x, 0},
            Vector4.{+s.y, +u.y, -f.y, 0},
            Vector4.{+s.z, +u.z, -f.z, 0},
            Vector4.{-Vector3.dot(s, eye), -Vector3.dot(u, eye), -fe, 1},
        };

        // note(josh): uncomment to support right-handed coords. right-handed would be flip_z_axis=true
        // if flip_z_axis {
        //     columns[3][2] = -columns[3][2];
        // }

        result := transmute(Matrix4, columns);
        return result;
    }

    proc inverse(m: Matrix4) : Matrix4 {
        return transpose(inverse_transpose(m));
    }

    proc minor(m: Matrix4, c: int, r: int) : float {
        cut_down: Matrix3;
        for (i := 0; i < 3; i += 1) {
            col: int;
            if (i < c) {
                col = i;
            }
            else {
                col = i+1;
            }
            for (j := 0; j < 3; j += 1) {
                row: int;
                if (j < r) {
                    row = j;
                }
                else {
                    row = j+1;
                }
                cut_down[i][j] = m[col][row];
            }
        }
        return Matrix3.determinant(cut_down);
    }

    proc cofactor(m: Matrix4, c: int, r: int) : float {
        minor_val := minor(m, c, r);
        if (((c + r) % 2) == 0) {
            return minor_val;
        }
        else {
            return -minor_val;
        }
    }

    proc adjoint(m: Matrix4) : Matrix4 {
        adj: Matrix4;
        for (i := 0; i < 4; i += 1) {
            for (j := 0; j < 4; j += 1) {
                adj[i][j] = cofactor(m, i, j);
            }
        }
        return adj;
    }

    proc determinant(m: Matrix4) : float {
        adj := adjoint(m);
        determinant: float;
        for (i := 0; i < 4; i += 1) {
            determinant += m[i][0] * adj[i][0];
        }
        return determinant;
    }

    proc inverse_transpose(m: Matrix4) : Matrix4 {
        adj := adjoint(m);
        determinant: float = 0;
        for (i := 0; i < 4; i += 1) {
            determinant += m[i][0] * adj[i][0];
        }
        inv_determinant: float = 1.0 / determinant;
        inverse_transpose: Matrix4;
        for (i := 0; i < 4; i += 1) {
            for (j := 0; j < 4; j += 1) {
                inverse_transpose[i][j] = adj[i][j] * inv_determinant;
            }
        }
        return inverse_transpose;
    }

    operator *(a: Matrix4, b: Matrix4) : Matrix4 {
        result: Matrix4;
        for (column := 0; column < 4; column += 1) {
            for (row := 0; row < 4; row += 1) {
                sum: float = 0;
                for (v := 0; v < 4; v += 1) {
                    sum += a[v][row] * b[column][v];
                }
                result[column][row] = sum;
            }
        }
        return result;
    }

    operator *(a: Matrix4, v: Vector4) : Vector4 {
        result: Vector4;
        for (row := 0; row < 4; row += 1) {
            sum: float = 0;
            for (column := 0; column < 4; column += 1) {
                sum += a[column][row] * v[column];
            }
            result[row] = sum;
        }
        return result;
    }

    operator *(a: Matrix4, f: float) : Matrix4 {
        result: Matrix4;
        for (column := 0; column < 4; column += 1) {
            for (row := 0; row < 4; row += 1) {
                result[column][row] = a[column][row] * f;
            }
        }
        return result;
    }
}

proc construct_translation_matrix(v: Vector3) : Matrix4 {
    result := Matrix4.identity();
    result[3][0] = v[0];
    result[3][1] = v[1];
    result[3][2] = v[2];
    return result;
}

proc construct_rotation_matrix(angle_radians: float, v: Vector3) : Matrix4 {
    c := cast(float, cos(cast(f64, angle_radians)));
    s := cast(float, sin(cast(f64, angle_radians)));

    a := Vector3.normalize(v);
    t := a * (1.0-c);

    result := Matrix4.identity();

    result[0][0] = c + t[0]*a[0];
    result[0][1] = 0 + t[0]*a[1] + s*a[2];
    result[0][2] = 0 + t[0]*a[2] - s*a[1];
    result[0][3] = 0;

    result[1][0] = 0 + t[1]*a[0] - s*a[2];
    result[1][1] = c + t[1]*a[1];
    result[1][2] = 0 + t[1]*a[2] + s*a[0];
    result[1][3] = 0;

    result[2][0] = 0 + t[2]*a[0] + s*a[1];
    result[2][1] = 0 + t[2]*a[1] - s*a[0];
    result[2][2] = c + t[2]*a[2];
    result[2][3] = 0;

    return result;
}

proc construct_scale_matrix(v: Vector3) : Matrix4 {
    result: Matrix4;
    result[0][0] = v[0];
    result[1][1] = v[1];
    result[2][2] = v[2];
    result[3][3] = 1;
    return result;
}

// note(josh): left-handed
proc construct_perspective_matrix(fovy_radians: float, aspect: float, near: float, far: float) : Matrix4 {
    tan_half_fovy := cast(float, tan(cast(f64, 0.5 * fovy_radians)));
    result: Matrix4;
    result[0][0] = 1.0 / (aspect*tan_half_fovy);
    result[1][1] = 1.0 / (tan_half_fovy);
    result[2][2] = +(far + near) / (far - near);
    result[2][3] = 1.0;
    result[3][2] = -2.0*far*near / (far - near);

    // note(josh): uncomment to support right-handed coords. right-handed would be flip_z_axis=true
    // if flip_z_axis {
    //     m[2] = -m[2];
    // }

    return result;
}

proc construct_orthographic_matrix(left: float, right: float, bottom: float, top: float, near: float, far: float) : Matrix4 {
    result: Matrix4;
    result[0][0] = 2.0 / (right - left);
    result[1][1] = 2.0 / (top - bottom);
    result[2][2] = 2.0 / (far - near);
    result[3][0] = (right + left)   / (left - right);
    result[3][1] = (top   + bottom) / (bottom - top);
    result[3][2] = (far + near) / (near - far);
    result[3][3] = 1.0;

    // note(josh): uncomment to support right-handed coords. right-handed would be flip_z_axis=true
    // if flip_z_axis {
    //     m[2] = -m[2];
    // }

    return result;
}



proc quaternion_to_matrix4(q: Quaternion) : Matrix4 {
    norm := Quaternion.normalize(q);

    xx := norm.x * norm.x;
    yy := norm.y * norm.y;
    zz := norm.z * norm.z;
    xy := norm.x * norm.y;
    xz := norm.x * norm.z;
    yz := norm.y * norm.z;
    wx := norm.w * norm.x;
    wy := norm.w * norm.y;
    wz := norm.w * norm.z;

    result: Matrix4;

    result[0][0] = 1.0 - 2.0 * (yy + zz);
    result[0][1] = 2.0 * (xy + wz);
    result[0][2] = 2.0 * (xz - wy);
    result[0][3] = 0.0;

    result[1][0] = 2.0 * (xy - wz);
    result[1][1] = 1.0 - 2.0 * (xx + zz);
    result[1][2] = 2.0 * (yz + wx);
    result[1][3] = 0.0;

    result[2][0] = 2.0 * (xz + wy);
    result[2][1] = 2.0 * (yz - wx);
    result[2][2] = 1.0 - 2.0 * (xx + yy);
    result[2][3] = 0.0;

    result[3][0] = 0.0;
    result[3][1] = 0.0;
    result[3][2] = 0.0;
    result[3][3] = 1.0;

    return result;
}

proc matrix4_to_quaternion(m: Matrix4) : Quaternion {
    t: float;
    result: Quaternion;
    if (m[2][2] < 0.0) {
        if (m[0][0] > m[1][1]) {
            t = 1 + m[0][0] - m[1][1] - m[2][2];
            result = Quaternion.{
                t,
                m[0][1] + m[1][0],
                m[2][0] + m[0][2],
                m[1][2] - m[2][1]
            };
        }
        else {
            t = 1 - m[0][0] + m[1][1] - m[2][2];
            result = Quaternion.{
                m[0][1] + m[1][0],
                t,
                m[1][2] + m[2][1],
                m[2][0] - m[0][2]
            };
        }
    }
    else {
        if (m[0][0] < -m[1][1]) {
            t = 1 - m[0][0] - m[1][1] + m[2][2];
            result = Quaternion.{
                m[2][0] + m[0][2],
                m[1][2] + m[2][1],
                t,
                m[0][1] - m[1][0]
            };
        }
        else {
            t = 1 + m[0][0] + m[1][1] + m[2][2];
            result = Quaternion.{
                m[1][2] - m[2][1],
                m[2][0] - m[0][2],
                m[0][1] - m[1][0],
                t
            };
        }
    }
    result = result * (0.5 / cast(float, sqrt(cast(f64, t))));
    return result;
}

proc construct_view_matrix(position: Vector3, orientation: Quaternion) : Matrix4 {
    translation := construct_translation_matrix(Vector3.negate(position));
    rotation := quaternion_to_matrix4(Quaternion.inverse(orientation));
    result := rotation * translation;
    return result;
}

proc construct_model_matrix(position: Vector3, scale: Vector3, orientation: Quaternion) : Matrix4 {
    t := construct_translation_matrix(position);
    s := construct_scale_matrix(scale);
    r := quaternion_to_matrix4(orientation);
    model_matrix := (t * r) * s;
    return model_matrix;
}

proc construct_trs_matrix(t: Vector3, r: Quaternion, s: Vector3) : Matrix4 {
    translation := construct_translation_matrix(t);
    rotation := quaternion_to_matrix4(r);
    scale := construct_scale_matrix(s);
    return translation * (rotation * scale); // todo(josh): are these parens right?
}

