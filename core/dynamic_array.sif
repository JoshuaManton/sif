#include "core:basic.sif"

struct Dynamic_Array!($T: typeid) {
    elements: []T;
    count: int;
    capacity: int;
    allocator: Allocator;
    operator [](dyn: >Dynamic_Array!(T), index: int) : >T {
        return dyn.elements[index];
    }
}

proc make_dynamic_array($T: typeid, capacity: int, allocator: Allocator) : Dynamic_Array!(T) {
    dyn: Dynamic_Array!(T);
    dyn.allocator = allocator;
    reserve(&dyn, capacity);
    return dyn;
}

proc destroy_dynamic_array(dyn: Dynamic_Array!($T)) {
    if (dyn.elements.data != null) {
        free(dyn.elements.data, dyn.allocator);
    }
}

proc append(dyn: ^Dynamic_Array!($T), value: T) : ^T {
    _dynamic_array_check_allocator(dyn);
    resize_if_at_capacity(dyn);
    assert(dyn.elements.count < dyn.capacity);
    assert(dyn.elements.count == dyn.count);
    dyn.elements.count += 1;
    dyn.elements[dyn.count] = value;
    ptr := &dyn.elements[dyn.count];
    dyn.count += 1;
    return ptr;
}

proc append_empty(dyn: ^Dynamic_Array!($T)) : ^T {
    t: T;
    return append(dyn, t);
}

proc insert(dyn: ^Dynamic_Array!($T), index: int, value: T) : ^T {
    _dynamic_array_check_allocator(dyn);
    resize_if_at_capacity(dyn);
    if (index >= dyn.count) {
        // todo(josh): when we have #caller_location call sif_bounds_check() here
        print("insert() out of bounds: %\n", index);
        assert(false);
    }
    if (index < 0) {
        // todo(josh): when we have #caller_location call sif_bounds_check() here
        print("insert() out of bounds: %\n", index);
        assert(false);
    }
    dyn.count += 1;
    dyn.elements.count += 1;
    memmove(&dyn.elements[index+1], &dyn.elements[index], cast(u64, (dyn.count - index) * sizeof(T)));
    ptr := &dyn^[index];
    ptr^ = value;
    return ptr;
}

proc reserve(dyn: ^Dynamic_Array!($T), new_cap: int) {
    old_data := dyn.elements.data;
    dyn.elements.data = cast(^T, alloc(new_cap * sizeof(T), DEFAULT_ALIGNMENT, dyn.allocator));
    dyn.capacity = new_cap;
    if (old_data != null) {
        memcpy(dyn.elements.data, old_data, cast(u64, dyn.count * sizeof(T)));
        free(old_data, dyn.allocator);
    }
}

proc pop(dyn: ^Dynamic_Array!($T)) : T {
    if (dyn.count == 0) {
        print("pop() called with empty dynamic array\n");
        assert(false);
    }
    value := dyn^[dyn.count-1];
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc unordered_remove(dyn: ^Dynamic_Array!($T), index: int) : T {
    value := dyn^[index];
    dyn^[index] = dyn^[dyn.count-1];
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc ordered_remove(dyn: ^Dynamic_Array!($T), index: int) : T {
    value := dyn^[index];
    if (index != dyn.count-1) {
        dst: rawptr = &dyn^[index];
        src: rawptr = &dyn^[index+1];
        memmove(dst, src, cast(u64, (dyn.count-index-1) * sizeof(T)));
    }
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc clear_dynamic_array(dyn: ^Dynamic_Array!($T)) {
    dyn.elements.count = 0;
    dyn.count = 0;
}

proc resize_if_at_capacity(dyn: ^Dynamic_Array!($T)) {
    if (dyn.count == dyn.capacity) {
        reserve(dyn, 8 + dyn.capacity * 2);
    }
}

proc _dynamic_array_check_allocator(dyn: ^Dynamic_Array!($T)) {
    if (dyn.allocator.alloc_proc == null) {
        print("Error: Allocator wasn't set on Dynamic_Array(%).\n", T);
        assert(false);
    }
}