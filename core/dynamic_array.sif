#include "core:basic.sif"

struct Dynamic_Array!($T: typeid) {
    elements: []T;
    count: int;
    capacity: int;
    allocator: Allocator;
    operator [](dyn: >Dynamic_Array!(T), index: int) : >T {
        return dyn.elements[index];
    }
}

proc append(dyn: ^Dynamic_Array!($T), value: T) : ^T {
    if (dyn.allocator.alloc_proc == null) {
        print("Error: Allocator wasn't set on Dynamic_Array(%).\n", T);
        assert(false);
    }
    if (dyn.count == dyn.capacity) {
        old_data := dyn.elements.data;
        new_cap := 8 + dyn.capacity * 2;
        dyn.elements.data = cast(^T, sif_alloc(new_cap * sizeof(T), DEFAULT_ALIGNMENT, dyn.allocator));
        dyn.capacity = new_cap;
        if (old_data != null) {
            memcpy(dyn.elements.data, old_data, cast(u64, dyn.count * sizeof(T)));
            sif_free(old_data, dyn.allocator);
        }
    }
    assert(dyn.elements.count < dyn.capacity);
    assert(dyn.elements.count == dyn.count);
    dyn.elements.count += 1;
    dyn.elements[dyn.count] = value;
    ptr := &dyn.elements[dyn.count];
    dyn.count += 1;
    return ptr;
}

proc append_empty(dyn: ^Dynamic_Array!($T)) : ^T {
    t: T;
    return append(dyn, t);
}

proc pop(dyn: ^Dynamic_Array!($T)) : T {
    if (dyn.count == 0) {
        print("pop() called with empty dynamic array\n");
        assert(false);
    }
    value := dyn^[dyn.count-1];
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc unordered_remove(dyn: ^Dynamic_Array!($T), index: int) : T {
    value := dyn^[index];
    dyn^[index] = dyn^[dyn.count-1];
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc ordered_remove(dyn: ^Dynamic_Array!($T), index: int) : T {
    value := dyn^[index];
    if (index != dyn.count-1) {
        src: rawptr = &dyn^[index+1];
        dst: rawptr = &dyn^[index];
        memmove(dst, src, cast(u64, (dyn.count-index+1) * sizeof(T)));
    }
    dyn.elements.count -= 1;
    dyn.count -= 1;
    return value;
}

proc clear_dynamic_array(dyn: ^Dynamic_Array!($T)) {
    dyn.elements.count = 0;
    dyn.count = 0;
}

proc destroy_dynamic_array(dyn: Dynamic_Array!($T)) {
    if (dyn.elements.data != null) {
        sif_free(dyn.elements.data, dyn.allocator);
    }
}
