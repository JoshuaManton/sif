proc print_char  (c: u8)                                                 #foreign;
proc print_int   (i: int)                                                #foreign;
proc print_float (f: float)                                              #foreign;
proc print_bool  (b: bool)                                               #foreign;
proc print_string(str: string)                                           #foreign;
proc alloc       (size: int)                                    : rawptr #foreign;
proc free        (ptr: rawptr)                                           #foreign;
proc assert      (condition: bool)                                       #foreign;
proc memcpy      (dst: rawptr, src: rawptr, size_in_bytes: u64) : rawptr #foreign;
proc memmove     (dst: rawptr, src: rawptr, size_in_bytes: u64) : rawptr #foreign;
proc strlen      (cstr: ^u8)                                    : u64    #foreign;
proc sin         (x: f64)                                       : f64    #foreign;



proc print_arg(arg: any) {
    if (arg.type == i8) {
        print_int(cast(int, cast(^i8, arg.data)^));
    }
    else if (arg.type == i16) {
        print_int(cast(int, cast(^i16, arg.data)^));
    }
    else if (arg.type == i32) {
        print_int(cast(int, cast(^i32, arg.data)^));
    }
    else if (arg.type == i64) {
        print_int(cast(int, cast(^i64, arg.data)^));
    }

    else if (arg.type == u8) {
        print_int(cast(int, cast(^u8, arg.data)^));
    }
    else if (arg.type == u16) {
        print_int(cast(int, cast(^u16, arg.data)^));
    }
    else if (arg.type == u32) {
        print_int(cast(int, cast(^u32, arg.data)^));
    }
    else if (arg.type == u64) {
        print_int(cast(int, cast(^u64, arg.data)^));
    }

    else if (arg.type == f32) {
        print_float(cast(f32, cast(^f32, arg.data)^));
    }
    else if (arg.type == f64) {
        print_float(cast(f32, cast(^f64, arg.data)^));
    }

    else if (arg.type == string) {
        print_string(cast(^string, arg.data)^);
    }

    else if (arg.type == bool) {
        print_bool(cast(^bool, arg.data)^);
    }

    else {
        print("<unhandled type>");
    }
}

proc print(fmt: string, args: ..any) {
    var arg_index = 0;
    for (var i = 0; i < fmt.count; i += 1) {
        var c = fmt[i];
        if (c == '%') {
            if ((i+1) < fmt.count) {
                if (fmt[i+1] == '%') {
                    print_char('%');
                    i += 1;
                    continue;
                }
            }

            var arg = args[arg_index];
            print_arg(arg);
            arg_index += 1;
        }
        else {
            print_char(c);
        }
    }
}

proc printa(args: ..any) {
    for (var i = 0; i < args.count; i += 1) {
        if (i != 0) {
            print_char(' ');
        }

        var arg = args[i];
        print_arg(arg);
    }
    print_char('\n');
}



proc string_eq(var a: string, var b: string) : bool {
    if (a.count != b.count) {
        return false;
    }
    for (var i = 0; i < a.count; i += 1) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}



proc slice_ptr(ptr: ^$T, count: int) : []T {
    var slice: []T;
    slice.data = ptr;
    slice.count = count;
    return slice;
}

proc string_ptr(ptr: ^u8, count: int) : string {
    var str: string;
    str.data = ptr;
    str.count = count;
    return str;
}
