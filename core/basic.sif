#c_code `
void print_int(i64 i) {
    printf("%lld", i);
}
void print_float(float f) {
    printf("%f", f);
}
void print_bool(bool b) {
    printf("%s", (b ? "true" : "false"));
}
void print_string(String string) {
    for (i64 i = 0; i < string.count; i++) {
        char c = string.data[i];
        putchar(c);
    }
}
void *alloc(i64 size) {
    char *memory = (char *)malloc(size);
    return memory;
}
void assert(bool condition) {
    if (!condition) {
        printf("Assertion failed.");
        *((char *)0) = 0;
    }
}
`



proc putchar     (c: u8)                                                 #foreign;
proc print_int   (i: int)                                                #foreign;
proc print_float (f: float)                                              #foreign;
proc print_bool  (b: bool)                                               #foreign;
proc print_string(str: string)                                           #foreign;
proc alloc       (size: int)                                    : rawptr #foreign;
proc free        (ptr: rawptr)                                           #foreign;
proc assert      (condition: bool)                                       #foreign;
proc memcpy      (dst: rawptr, src: rawptr, size_in_bytes: u32) : rawptr #foreign;



proc print(fmt: string, args: ..any) {
    var arg_index = 0;
    for (var i = 0; i < fmt.count; i += 1) {
        var c = fmt[i];
        if (c == '%') {
            if ((i+1) < fmt.count) {
                if (fmt[i+1] == '%') {
                    putchar('%');
                    i += 1;
                    continue;
                }
            }

            var arg = args[arg_index];
            if (arg.type == int) {
                print_int(cast(^int, arg.data)^);
            }
            else if (arg.type == float) {
                print_float(cast(^float, arg.data)^);
            }
            else if (arg.type == string) {
                print_string(cast(^string, arg.data)^);
            }
            else if (arg.type == bool) {
                print_bool(cast(^bool, arg.data)^);
            }
            arg_index += 1;
        }
        else {
            putchar(c);
        }
    }
}



proc string_eq(var a: string, var b: string) : bool {
    if (a.count != b.count) {
        return false;
    }
    for (var i = 0; i < a.count; i += 1) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}



proc slice_ptr(ptr: ^$T, count: int) : []T {
    var slice: []T;
    slice.data = ptr;
    slice.count = count;
    return slice;
}

proc string_ptr(ptr: ^u8, count: int) : string {
    var str: string;
    str.data = ptr;
    str.count = count;
    return str;
}
