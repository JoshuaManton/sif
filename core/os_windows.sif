#include "core:windows.sif"

struct File {
    handle: HANDLE;
}

proc file_open(filepath: string, out_file: ^File, flags: File_Open_Flags, allocator: Allocator) : bool {
    success: bool;
    length: i32;
    filepath_wide := to_wide_string(filepath, allocator, &success, &length);
    if (!success) {
        return false;
    }
    defer sif_free(filepath_wide, allocator);
    access_flags: i32;
    share_flags: i32;
    create_flags: i32;
    if (flags & .READ > 0) {
        access_flags |= FILE_GENERIC_READ;
        share_flags |= FILE_SHARE_READ;
        create_flags |= OPEN_EXISTING;
    }
    if (flags & .WRITE > 0) {
        access_flags |= FILE_GENERIC_WRITE;
        create_flags |= CREATE_ALWAYS;
    }

    file: File;
    file.handle = CreateFileW(filepath_wide, access_flags, share_flags, null, create_flags, FILE_ATTRIBUTE_NORMAL, null);
    if (file.handle == INVALID_HANDLE_VALUE) {
        return false;
    }
    out_file^ = file;
    return true;
}

proc file_close(file: File) : bool {
    if (CloseHandle(file.handle) == 0) {
        return false;
    }
    return true;
}

proc file_length(file: File, out_length: ^int) : bool {
    integer: LARGE_INTEGER;
    if (GetFileSizeEx(file.handle, &integer) == 0) {
        return false;
    }
    out_length^ = integer.QuadPart;
    return true;
}

proc file_read(file: File, data: []byte) : bool {
    num_read: u32;
    if (ReadFile(file.handle, data.data, cast(u32, data.count), &num_read, null) == 0) {
        return false;
    }
    // todo(josh): check that num_read == data.count?
    return true;
}

proc file_write(file: File, data: []byte) : bool {
    num_written: u32;
    if (WriteFile(file.handle, data.data, cast(u32, data.count), &num_written, null) == 0) {
        return false;
    }
    // todo(josh): check that num_written == data.count?
    return true;
}