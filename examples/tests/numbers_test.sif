#include "core:random.sif"

proc test_numbers() {
    // random
    {
        r: Random_State;
        init_random_state(&r, 61274628);
        num0: int;
        num1: int;
        num2: int;
        num3: int;
        num4: int;
        num5: int;
        num6: int;
        num7: int;
        num8: int;
        num9: int;
        for (i := 0; i < 10000; i += 1) {
            val := random_f32(&r);
            if      (val < 0.1) { num0 += 1; }
            else if (val < 0.2) { num1 += 1; }
            else if (val < 0.3) { num2 += 1; }
            else if (val < 0.4) { num3 += 1; }
            else if (val < 0.5) { num4 += 1; }
            else if (val < 0.6) { num5 += 1; }
            else if (val < 0.7) { num6 += 1; }
            else if (val < 0.8) { num7 += 1; }
            else if (val < 0.9) { num8 += 1; }
            else if (val < 1.0) { num9 += 1; }
        }
        assert(num0 == 1007);
        assert(num1 == 1013);
        assert(num2 == 961);
        assert(num3 == 1004);
        assert(num4 == 953);
        assert(num5 == 1042);
        assert(num6 == 1054);
        assert(num7 == 1012);
        assert(num8 == 1009);
        assert(num9 == 945);
    }

    // number constants
    {
        f32_min : f32 = 1.175494351e-38;
        f32_max : f32 = 3.402823466e+38;
        f64_min : f64 = 2.2250738585072014e-308;
        f64_max : f64 = 1.7976931348623158e+308;
        tau     :=      6.28318530717958647692528676655900576;
        pi      :=      3.14159265358979323846264338327950288;
        e       :=      2.71828182845904523536;

        assert(f32_min != 0);
        assert(f32_max != 0);
        assert(f64_min != 0);
        assert(f64_max != 0);
        assert(tau     != 0);
        assert(pi      != 0);
        assert(e       != 0);

        assert(f32_min == 1.175494351e-38);
        assert(f32_max == 3.402823466e+38);
        assert(f64_min == 2.2250738585072014e-308);
        assert(f64_max == 1.7976931348623158e+308);
        assert(tau     == 6.28318530717958647692528676655900576);
        assert(pi      == 3.14159265358979323846264338327950288);
        assert(e       == 2.71828182845904523536);

        hexi: int = 0xff;
        assert(hexi == 255);
        hexu: uint = 0xff;
        assert(hexu == 255);
        hexf: float = 0xff;
        assert(hexf == 255);
    }
}