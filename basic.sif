#c_code `
void print_int(i64 i) {
    printf("%lld\n", i);
}
void print_float(float f) {
    printf("%f\n", f);
}
void print_string(String string) {
    for (i64 i = 0; i < string.count; i++) {
        char c = string.data[i];
        printf("%c", c);
    }
}
void *alloc(i64 size) {
    char *memory = (char *)malloc(size);
    return memory;
}
void assert(bool condition) {
    if (!condition) {
        printf("Assertion failed.");
        *((char *)0) = 0;
    }
}
`

proc print_int   (i: int)                                                #foreign;
proc print_float (f: float)                                              #foreign;
proc print_string(str: string)                                           #foreign;
proc alloc       (size: int)                                    : rawptr #foreign;
proc free        (ptr: rawptr)                                           #foreign;
proc assert      (condition: bool)                                       #foreign;
proc memcpy      (dst: rawptr, src: rawptr, size_in_bytes: u32) : rawptr #foreign;



proc string_eq(var a: string, var b: string) : bool {
    if (a.count != b.count) {
        return false;
    }
    for (var i = 0; i < a.count; i += 1) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}



proc slice_ptr(ptr: ^$T, count: int) : []T {
    var slice: []T;
    slice.data = ptr;
    slice.count = count;
    return slice;
}
